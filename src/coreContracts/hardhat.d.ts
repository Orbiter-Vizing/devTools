/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Create3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Create3__factory>;
    getContractFactory(
      name: "Create3Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Create3Address__factory>;
    getContractFactory(
      name: "Create3Deployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Create3Deployer__factory>;
    getContractFactory(
      name: "CreateDeploy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CreateDeploy__factory>;
    getContractFactory(
      name: "Deployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Deployer__factory>;
    getContractFactory(
      name: "IDeploy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDeploy__factory>;
    getContractFactory(
      name: "IDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDeployer__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "EIP712Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "NoncesUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NoncesUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Utils__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Burnable__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "ERC721Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Pausable__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSA__factory>;
    getContractFactory(
      name: "MerkleProof",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleProof__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "CREATE3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CREATE3Factory__factory>;
    getContractFactory(
      name: "ICREATE3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICREATE3Factory__factory>;
    getContractFactory(
      name: "IMessageChannel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageChannel__factory>;
    getContractFactory(
      name: "IMessageDashboard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageDashboard__factory>;
    getContractFactory(
      name: "IMessageEmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageEmitter__factory>;
    getContractFactory(
      name: "IMessageEvent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageEvent__factory>;
    getContractFactory(
      name: "IMessageReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageReceiver__factory>;
    getContractFactory(
      name: "IMessageSimulation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageSimulation__factory>;
    getContractFactory(
      name: "IMessageSpaceStation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageSpaceStation__factory>;
    getContractFactory(
      name: "IVizingGasSystemChannel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVizingGasSystemChannel__factory>;
    getContractFactory(
      name: "MessageEmitterUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageEmitterUpgradeable__factory>;
    getContractFactory(
      name: "MessageEmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageEmitter__factory>;
    getContractFactory(
      name: "MessageReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageReceiverUpgradeable__factory>;
    getContractFactory(
      name: "MessageReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageReceiver__factory>;
    getContractFactory(
      name: "VizingOmniUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VizingOmniUpgradeable__factory>;
    getContractFactory(
      name: "VizingOmni",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VizingOmni__factory>;
    getContractFactory(
      name: "MessageCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageCore__factory>;
    getContractFactory(
      name: "MessageMonitor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageMonitor__factory>;
    getContractFactory(
      name: "TokenExchanger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenExchanger__factory>;
    getContractFactory(
      name: "IOmniERC20Core",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOmniERC20Core__factory>;
    getContractFactory(
      name: "MyOmniERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MyOmniERC20__factory>;
    getContractFactory(
      name: "OmniERC20Core",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OmniERC20Core__factory>;
    getContractFactory(
      name: "ICompanionMessage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICompanionMessage__factory>;
    getContractFactory(
      name: "IOmniNFTBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOmniNFTBridge__factory>;
    getContractFactory(
      name: "OmniNFTBridgeCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OmniNFTBridgeCore__factory>;
    getContractFactory(
      name: "TokenWrapped",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenWrapped__factory>;
    getContractFactory(
      name: "VizingNFTBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VizingNFTBridge__factory>;
    getContractFactory(
      name: "IOmniTokenCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOmniTokenCore__factory>;
    getContractFactory(
      name: "OmniToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OmniToken__factory>;
    getContractFactory(
      name: "OmniTokenCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OmniTokenCore__factory>;
    getContractFactory(
      name: "IOminiTokenBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOminiTokenBridge__factory>;
    getContractFactory(
      name: "Converter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Converter__factory>;
    getContractFactory(
      name: "OmniTokenBridgeCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OmniTokenBridgeCore__factory>;
    getContractFactory(
      name: "TokenWrapped",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenWrapped__factory>;
    getContractFactory(
      name: "IColor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IColor__factory>;
    getContractFactory(
      name: "VizingTokenBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VizingTokenBridge__factory>;
    getContractFactory(
      name: "SimultaneousTokenTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimultaneousTokenTransfer__factory>;
    getContractFactory(
      name: "TokenDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenDistributor__factory>;
    getContractFactory(
      name: "ExpertHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExpertHook__factory>;
    getContractFactory(
      name: "IDepositSpaceStation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDepositSpaceStation__factory>;
    getContractFactory(
      name: "ExpertHookTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExpertHookTransfer__factory>;
    getContractFactory(
      name: "IExpertHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExpertHook__factory>;
    getContractFactory(
      name: "IExpertHookTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExpertHookTransfer__factory>;
    getContractFactory(
      name: "IMessageChannel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageChannel__factory>;
    getContractFactory(
      name: "IMessageDashboard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageDashboard__factory>;
    getContractFactory(
      name: "IMessageEmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageEmitter__factory>;
    getContractFactory(
      name: "IMessageEvent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageEvent__factory>;
    getContractFactory(
      name: "IMessageReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageReceiver__factory>;
    getContractFactory(
      name: "IMessageSimulation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageSimulation__factory>;
    getContractFactory(
      name: "IMessageSpaceStation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageSpaceStation__factory>;
    getContractFactory(
      name: "IMessageValidateStation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageValidateStation__factory>;
    getContractFactory(
      name: "IVizingGasSystem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVizingGasSystem__factory>;
    getContractFactory(
      name: "IVizingGasSystemChannel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVizingGasSystemChannel__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "MessageEmitterUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageEmitterUpgradeable__factory>;
    getContractFactory(
      name: "MessageEmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageEmitter__factory>;
    getContractFactory(
      name: "MessageReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageReceiverUpgradeable__factory>;
    getContractFactory(
      name: "MessageReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageReceiver__factory>;
    getContractFactory(
      name: "MessageSpaceStation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageSpaceStation__factory>;
    getContractFactory(
      name: "MessageSpaceStationUg",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageSpaceStationUg__factory>;
    getContractFactory(
      name: "ChainA_EncodeMessageDemo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainA_EncodeMessageDemo__factory>;
    getContractFactory(
      name: "ChainB_RouterContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainB_RouterContract__factory>;
    getContractFactory(
      name: "IOtherChainInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOtherChainInterface__factory>;
    getContractFactory(
      name: "DAppDemo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAppDemo__factory>;
    getContractFactory(
      name: "MyToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MyToken__factory>;
    getContractFactory(
      name: "Helper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Helper__factory>;
    getContractFactory(
      name: "MockNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockNFT__factory>;
    getContractFactory(
      name: "ORBIToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ORBIToken__factory>;
    getContractFactory(
      name: "VizingNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VizingNFT__factory>;
    getContractFactory(
      name: "TESTERC20UGV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TESTERC20UGV1__factory>;
    getContractFactory(
      name: "TESTERC20UGV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TESTERC20UGV2__factory>;
    getContractFactory(
      name: "DepositSpaceStation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DepositSpaceStation__factory>;
    getContractFactory(
      name: "MessageValidateStation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageValidateStation__factory>;
    getContractFactory(
      name: "VizingGasSystem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VizingGasSystem__factory>;
    getContractFactory(
      name: "VizingOmniUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VizingOmniUpgradeable__factory>;
    getContractFactory(
      name: "VizingOmni",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VizingOmni__factory>;

    getContractAt(
      name: "Create3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Create3>;
    getContractAt(
      name: "Create3Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Create3Address>;
    getContractAt(
      name: "Create3Deployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Create3Deployer>;
    getContractAt(
      name: "CreateDeploy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CreateDeploy>;
    getContractAt(
      name: "Deployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Deployer>;
    getContractAt(
      name: "IDeploy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDeploy>;
    getContractAt(
      name: "IDeployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDeployer>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ERC20PermitUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PermitUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "EIP712Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "NoncesUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NoncesUpgradeable>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "IERC5267",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "IBeacon",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Utils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Utils>;
    getContractAt(
      name: "Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "ERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Burnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Burnable>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "ERC721Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Pausable>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "ECDSA",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSA>;
    getContractAt(
      name: "MerkleProof",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleProof>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Math",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "Strings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "CREATE3Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CREATE3Factory>;
    getContractAt(
      name: "ICREATE3Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICREATE3Factory>;
    getContractAt(
      name: "IMessageChannel",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageChannel>;
    getContractAt(
      name: "IMessageDashboard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageDashboard>;
    getContractAt(
      name: "IMessageEmitter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageEmitter>;
    getContractAt(
      name: "IMessageEvent",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageEvent>;
    getContractAt(
      name: "IMessageReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageReceiver>;
    getContractAt(
      name: "IMessageSimulation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageSimulation>;
    getContractAt(
      name: "IMessageSpaceStation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageSpaceStation>;
    getContractAt(
      name: "IVizingGasSystemChannel",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVizingGasSystemChannel>;
    getContractAt(
      name: "MessageEmitterUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageEmitterUpgradeable>;
    getContractAt(
      name: "MessageEmitter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageEmitter>;
    getContractAt(
      name: "MessageReceiverUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageReceiverUpgradeable>;
    getContractAt(
      name: "MessageReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageReceiver>;
    getContractAt(
      name: "VizingOmniUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VizingOmniUpgradeable>;
    getContractAt(
      name: "VizingOmni",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VizingOmni>;
    getContractAt(
      name: "MessageCore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageCore>;
    getContractAt(
      name: "MessageMonitor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageMonitor>;
    getContractAt(
      name: "TokenExchanger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenExchanger>;
    getContractAt(
      name: "IOmniERC20Core",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOmniERC20Core>;
    getContractAt(
      name: "MyOmniERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MyOmniERC20>;
    getContractAt(
      name: "OmniERC20Core",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OmniERC20Core>;
    getContractAt(
      name: "ICompanionMessage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICompanionMessage>;
    getContractAt(
      name: "IOmniNFTBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOmniNFTBridge>;
    getContractAt(
      name: "OmniNFTBridgeCore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OmniNFTBridgeCore>;
    getContractAt(
      name: "TokenWrapped",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenWrapped>;
    getContractAt(
      name: "VizingNFTBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VizingNFTBridge>;
    getContractAt(
      name: "IOmniTokenCore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOmniTokenCore>;
    getContractAt(
      name: "OmniToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OmniToken>;
    getContractAt(
      name: "OmniTokenCore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OmniTokenCore>;
    getContractAt(
      name: "IOminiTokenBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOminiTokenBridge>;
    getContractAt(
      name: "Converter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Converter>;
    getContractAt(
      name: "OmniTokenBridgeCore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OmniTokenBridgeCore>;
    getContractAt(
      name: "TokenWrapped",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenWrapped>;
    getContractAt(
      name: "IColor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IColor>;
    getContractAt(
      name: "VizingTokenBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VizingTokenBridge>;
    getContractAt(
      name: "SimultaneousTokenTransfer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SimultaneousTokenTransfer>;
    getContractAt(
      name: "TokenDistributor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenDistributor>;
    getContractAt(
      name: "ExpertHook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ExpertHook>;
    getContractAt(
      name: "IDepositSpaceStation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDepositSpaceStation>;
    getContractAt(
      name: "ExpertHookTransfer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ExpertHookTransfer>;
    getContractAt(
      name: "IExpertHook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExpertHook>;
    getContractAt(
      name: "IExpertHookTransfer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExpertHookTransfer>;
    getContractAt(
      name: "IMessageChannel",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageChannel>;
    getContractAt(
      name: "IMessageDashboard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageDashboard>;
    getContractAt(
      name: "IMessageEmitter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageEmitter>;
    getContractAt(
      name: "IMessageEvent",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageEvent>;
    getContractAt(
      name: "IMessageReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageReceiver>;
    getContractAt(
      name: "IMessageSimulation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageSimulation>;
    getContractAt(
      name: "IMessageSpaceStation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageSpaceStation>;
    getContractAt(
      name: "IMessageValidateStation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageValidateStation>;
    getContractAt(
      name: "IVizingGasSystem",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVizingGasSystem>;
    getContractAt(
      name: "IVizingGasSystemChannel",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVizingGasSystemChannel>;
    getContractAt(
      name: "Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "MessageEmitterUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageEmitterUpgradeable>;
    getContractAt(
      name: "MessageEmitter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageEmitter>;
    getContractAt(
      name: "MessageReceiverUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageReceiverUpgradeable>;
    getContractAt(
      name: "MessageReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageReceiver>;
    getContractAt(
      name: "MessageSpaceStation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageSpaceStation>;
    getContractAt(
      name: "MessageSpaceStationUg",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageSpaceStationUg>;
    getContractAt(
      name: "ChainA_EncodeMessageDemo",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainA_EncodeMessageDemo>;
    getContractAt(
      name: "ChainB_RouterContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainB_RouterContract>;
    getContractAt(
      name: "IOtherChainInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOtherChainInterface>;
    getContractAt(
      name: "DAppDemo",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DAppDemo>;
    getContractAt(
      name: "MyToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MyToken>;
    getContractAt(
      name: "Helper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Helper>;
    getContractAt(
      name: "MockNFT",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockNFT>;
    getContractAt(
      name: "ORBIToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ORBIToken>;
    getContractAt(
      name: "VizingNFT",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VizingNFT>;
    getContractAt(
      name: "TESTERC20UGV1",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TESTERC20UGV1>;
    getContractAt(
      name: "TESTERC20UGV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TESTERC20UGV2>;
    getContractAt(
      name: "DepositSpaceStation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DepositSpaceStation>;
    getContractAt(
      name: "MessageValidateStation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageValidateStation>;
    getContractAt(
      name: "VizingGasSystem",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VizingGasSystem>;
    getContractAt(
      name: "VizingOmniUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VizingOmniUpgradeable>;
    getContractAt(
      name: "VizingOmni",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VizingOmni>;

    deployContract(
      name: "Create3",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Create3>;
    deployContract(
      name: "Create3Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Create3Address>;
    deployContract(
      name: "Create3Deployer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Create3Deployer>;
    deployContract(
      name: "CreateDeploy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CreateDeploy>;
    deployContract(
      name: "Deployer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Deployer>;
    deployContract(
      name: "IDeploy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDeploy>;
    deployContract(
      name: "IDeployer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDeployer>;
    deployContract(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Upgradeable>;
    deployContract(
      name: "ERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20PermitUpgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "EIP712Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712Upgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "NoncesUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NoncesUpgradeable>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Proxy>;
    deployContract(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "ERC721Burnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Burnable>;
    deployContract(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Enumerable>;
    deployContract(
      name: "ERC721Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Pausable>;
    deployContract(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Enumerable>;
    deployContract(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "MerkleProof",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleProof>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Math",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "Strings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "CREATE3Factory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CREATE3Factory>;
    deployContract(
      name: "ICREATE3Factory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICREATE3Factory>;
    deployContract(
      name: "IMessageChannel",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageChannel>;
    deployContract(
      name: "IMessageDashboard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageDashboard>;
    deployContract(
      name: "IMessageEmitter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageEmitter>;
    deployContract(
      name: "IMessageEvent",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageEvent>;
    deployContract(
      name: "IMessageReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageReceiver>;
    deployContract(
      name: "IMessageSimulation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageSimulation>;
    deployContract(
      name: "IMessageSpaceStation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageSpaceStation>;
    deployContract(
      name: "IVizingGasSystemChannel",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVizingGasSystemChannel>;
    deployContract(
      name: "MessageEmitterUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageEmitterUpgradeable>;
    deployContract(
      name: "MessageEmitter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageEmitter>;
    deployContract(
      name: "MessageReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageReceiverUpgradeable>;
    deployContract(
      name: "MessageReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageReceiver>;
    deployContract(
      name: "VizingOmniUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VizingOmniUpgradeable>;
    deployContract(
      name: "VizingOmni",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VizingOmni>;
    deployContract(
      name: "MessageCore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageCore>;
    deployContract(
      name: "MessageMonitor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageMonitor>;
    deployContract(
      name: "TokenExchanger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenExchanger>;
    deployContract(
      name: "IOmniERC20Core",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOmniERC20Core>;
    deployContract(
      name: "MyOmniERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MyOmniERC20>;
    deployContract(
      name: "OmniERC20Core",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniERC20Core>;
    deployContract(
      name: "ICompanionMessage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICompanionMessage>;
    deployContract(
      name: "IOmniNFTBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOmniNFTBridge>;
    deployContract(
      name: "OmniNFTBridgeCore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniNFTBridgeCore>;
    deployContract(
      name: "TokenWrapped",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenWrapped>;
    deployContract(
      name: "VizingNFTBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VizingNFTBridge>;
    deployContract(
      name: "IOmniTokenCore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOmniTokenCore>;
    deployContract(
      name: "OmniToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniToken>;
    deployContract(
      name: "OmniTokenCore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniTokenCore>;
    deployContract(
      name: "IOminiTokenBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOminiTokenBridge>;
    deployContract(
      name: "Converter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Converter>;
    deployContract(
      name: "OmniTokenBridgeCore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniTokenBridgeCore>;
    deployContract(
      name: "TokenWrapped",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenWrapped>;
    deployContract(
      name: "IColor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IColor>;
    deployContract(
      name: "VizingTokenBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VizingTokenBridge>;
    deployContract(
      name: "SimultaneousTokenTransfer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SimultaneousTokenTransfer>;
    deployContract(
      name: "TokenDistributor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenDistributor>;
    deployContract(
      name: "ExpertHook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExpertHook>;
    deployContract(
      name: "IDepositSpaceStation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDepositSpaceStation>;
    deployContract(
      name: "ExpertHookTransfer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExpertHookTransfer>;
    deployContract(
      name: "IExpertHook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExpertHook>;
    deployContract(
      name: "IExpertHookTransfer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExpertHookTransfer>;
    deployContract(
      name: "IMessageChannel",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageChannel>;
    deployContract(
      name: "IMessageDashboard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageDashboard>;
    deployContract(
      name: "IMessageEmitter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageEmitter>;
    deployContract(
      name: "IMessageEvent",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageEvent>;
    deployContract(
      name: "IMessageReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageReceiver>;
    deployContract(
      name: "IMessageSimulation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageSimulation>;
    deployContract(
      name: "IMessageSpaceStation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageSpaceStation>;
    deployContract(
      name: "IMessageValidateStation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageValidateStation>;
    deployContract(
      name: "IVizingGasSystem",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVizingGasSystem>;
    deployContract(
      name: "IVizingGasSystemChannel",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVizingGasSystemChannel>;
    deployContract(
      name: "Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "MessageEmitterUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageEmitterUpgradeable>;
    deployContract(
      name: "MessageEmitter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageEmitter>;
    deployContract(
      name: "MessageReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageReceiverUpgradeable>;
    deployContract(
      name: "MessageReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageReceiver>;
    deployContract(
      name: "MessageSpaceStation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageSpaceStation>;
    deployContract(
      name: "MessageSpaceStationUg",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageSpaceStationUg>;
    deployContract(
      name: "ChainA_EncodeMessageDemo",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainA_EncodeMessageDemo>;
    deployContract(
      name: "ChainB_RouterContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainB_RouterContract>;
    deployContract(
      name: "IOtherChainInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOtherChainInterface>;
    deployContract(
      name: "DAppDemo",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DAppDemo>;
    deployContract(
      name: "MyToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MyToken>;
    deployContract(
      name: "Helper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Helper>;
    deployContract(
      name: "MockNFT",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockNFT>;
    deployContract(
      name: "ORBIToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ORBIToken>;
    deployContract(
      name: "VizingNFT",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VizingNFT>;
    deployContract(
      name: "TESTERC20UGV1",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TESTERC20UGV1>;
    deployContract(
      name: "TESTERC20UGV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TESTERC20UGV2>;
    deployContract(
      name: "DepositSpaceStation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DepositSpaceStation>;
    deployContract(
      name: "MessageValidateStation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageValidateStation>;
    deployContract(
      name: "VizingGasSystem",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VizingGasSystem>;
    deployContract(
      name: "VizingOmniUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VizingOmniUpgradeable>;
    deployContract(
      name: "VizingOmni",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VizingOmni>;

    deployContract(
      name: "Create3",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Create3>;
    deployContract(
      name: "Create3Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Create3Address>;
    deployContract(
      name: "Create3Deployer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Create3Deployer>;
    deployContract(
      name: "CreateDeploy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CreateDeploy>;
    deployContract(
      name: "Deployer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Deployer>;
    deployContract(
      name: "IDeploy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDeploy>;
    deployContract(
      name: "IDeployer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDeployer>;
    deployContract(
      name: "AccessControlUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "ERC20Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Upgradeable>;
    deployContract(
      name: "ERC20PermitUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20PermitUpgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "EIP712Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712Upgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "NoncesUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NoncesUpgradeable>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1822Proxiable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC5267",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "IBeacon",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Proxy>;
    deployContract(
      name: "ERC1967Utils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: "Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "ERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "ERC721Burnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Burnable>;
    deployContract(
      name: "ERC721Enumerable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Enumerable>;
    deployContract(
      name: "ERC721Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Pausable>;
    deployContract(
      name: "IERC721Enumerable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Enumerable>;
    deployContract(
      name: "IERC721Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC721Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ECDSA",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "MerkleProof",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleProof>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Math",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "Strings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "CREATE3Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CREATE3Factory>;
    deployContract(
      name: "ICREATE3Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICREATE3Factory>;
    deployContract(
      name: "IMessageChannel",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageChannel>;
    deployContract(
      name: "IMessageDashboard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageDashboard>;
    deployContract(
      name: "IMessageEmitter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageEmitter>;
    deployContract(
      name: "IMessageEvent",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageEvent>;
    deployContract(
      name: "IMessageReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageReceiver>;
    deployContract(
      name: "IMessageSimulation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageSimulation>;
    deployContract(
      name: "IMessageSpaceStation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageSpaceStation>;
    deployContract(
      name: "IVizingGasSystemChannel",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVizingGasSystemChannel>;
    deployContract(
      name: "MessageEmitterUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageEmitterUpgradeable>;
    deployContract(
      name: "MessageEmitter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageEmitter>;
    deployContract(
      name: "MessageReceiverUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageReceiverUpgradeable>;
    deployContract(
      name: "MessageReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageReceiver>;
    deployContract(
      name: "VizingOmniUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VizingOmniUpgradeable>;
    deployContract(
      name: "VizingOmni",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VizingOmni>;
    deployContract(
      name: "MessageCore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageCore>;
    deployContract(
      name: "MessageMonitor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageMonitor>;
    deployContract(
      name: "TokenExchanger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenExchanger>;
    deployContract(
      name: "IOmniERC20Core",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOmniERC20Core>;
    deployContract(
      name: "MyOmniERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MyOmniERC20>;
    deployContract(
      name: "OmniERC20Core",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniERC20Core>;
    deployContract(
      name: "ICompanionMessage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICompanionMessage>;
    deployContract(
      name: "IOmniNFTBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOmniNFTBridge>;
    deployContract(
      name: "OmniNFTBridgeCore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniNFTBridgeCore>;
    deployContract(
      name: "TokenWrapped",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenWrapped>;
    deployContract(
      name: "VizingNFTBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VizingNFTBridge>;
    deployContract(
      name: "IOmniTokenCore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOmniTokenCore>;
    deployContract(
      name: "OmniToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniToken>;
    deployContract(
      name: "OmniTokenCore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniTokenCore>;
    deployContract(
      name: "IOminiTokenBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOminiTokenBridge>;
    deployContract(
      name: "Converter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Converter>;
    deployContract(
      name: "OmniTokenBridgeCore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmniTokenBridgeCore>;
    deployContract(
      name: "TokenWrapped",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenWrapped>;
    deployContract(
      name: "IColor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IColor>;
    deployContract(
      name: "VizingTokenBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VizingTokenBridge>;
    deployContract(
      name: "SimultaneousTokenTransfer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SimultaneousTokenTransfer>;
    deployContract(
      name: "TokenDistributor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenDistributor>;
    deployContract(
      name: "ExpertHook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExpertHook>;
    deployContract(
      name: "IDepositSpaceStation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDepositSpaceStation>;
    deployContract(
      name: "ExpertHookTransfer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExpertHookTransfer>;
    deployContract(
      name: "IExpertHook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExpertHook>;
    deployContract(
      name: "IExpertHookTransfer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExpertHookTransfer>;
    deployContract(
      name: "IMessageChannel",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageChannel>;
    deployContract(
      name: "IMessageDashboard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageDashboard>;
    deployContract(
      name: "IMessageEmitter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageEmitter>;
    deployContract(
      name: "IMessageEvent",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageEvent>;
    deployContract(
      name: "IMessageReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageReceiver>;
    deployContract(
      name: "IMessageSimulation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageSimulation>;
    deployContract(
      name: "IMessageSpaceStation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageSpaceStation>;
    deployContract(
      name: "IMessageValidateStation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageValidateStation>;
    deployContract(
      name: "IVizingGasSystem",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVizingGasSystem>;
    deployContract(
      name: "IVizingGasSystemChannel",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVizingGasSystemChannel>;
    deployContract(
      name: "Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "MessageEmitterUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageEmitterUpgradeable>;
    deployContract(
      name: "MessageEmitter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageEmitter>;
    deployContract(
      name: "MessageReceiverUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageReceiverUpgradeable>;
    deployContract(
      name: "MessageReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageReceiver>;
    deployContract(
      name: "MessageSpaceStation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageSpaceStation>;
    deployContract(
      name: "MessageSpaceStationUg",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageSpaceStationUg>;
    deployContract(
      name: "ChainA_EncodeMessageDemo",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainA_EncodeMessageDemo>;
    deployContract(
      name: "ChainB_RouterContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainB_RouterContract>;
    deployContract(
      name: "IOtherChainInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOtherChainInterface>;
    deployContract(
      name: "DAppDemo",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DAppDemo>;
    deployContract(
      name: "MyToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MyToken>;
    deployContract(
      name: "Helper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Helper>;
    deployContract(
      name: "MockNFT",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockNFT>;
    deployContract(
      name: "ORBIToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ORBIToken>;
    deployContract(
      name: "VizingNFT",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VizingNFT>;
    deployContract(
      name: "TESTERC20UGV1",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TESTERC20UGV1>;
    deployContract(
      name: "TESTERC20UGV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TESTERC20UGV2>;
    deployContract(
      name: "DepositSpaceStation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DepositSpaceStation>;
    deployContract(
      name: "MessageValidateStation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MessageValidateStation>;
    deployContract(
      name: "VizingGasSystem",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VizingGasSystem>;
    deployContract(
      name: "VizingOmniUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VizingOmniUpgradeable>;
    deployContract(
      name: "VizingOmni",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VizingOmni>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
