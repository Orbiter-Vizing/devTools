/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IMessageStruct {
  export type SignedMessageBaseStruct = {
    srcChainId: BigNumberish;
    nonceLaunch: BigNumberish;
    srcTxHash: BytesLike;
    destTxHash: BytesLike;
    srcTxTimestamp: BigNumberish;
    destTxTimestamp: BigNumberish;
  };

  export type SignedMessageBaseStructOutput = [
    srcChainId: bigint,
    nonceLaunch: bigint,
    srcTxHash: string,
    destTxHash: string,
    srcTxTimestamp: bigint,
    destTxTimestamp: bigint
  ] & {
    srcChainId: bigint;
    nonceLaunch: bigint;
    srcTxHash: string;
    destTxHash: string;
    srcTxTimestamp: bigint;
    destTxTimestamp: bigint;
  };

  export type LaunchParamsStruct = {
    earliestArrivalTimestamp: BigNumberish;
    latestArrivalTimestamp: BigNumberish;
    relayer: AddressLike;
    sender: AddressLike;
    value: BigNumberish;
    destChainid: BigNumberish;
    additionParams: BytesLike;
    message: BytesLike;
  };

  export type LaunchParamsStructOutput = [
    earliestArrivalTimestamp: bigint,
    latestArrivalTimestamp: bigint,
    relayer: string,
    sender: string,
    value: bigint,
    destChainid: bigint,
    additionParams: string,
    message: string
  ] & {
    earliestArrivalTimestamp: bigint;
    latestArrivalTimestamp: bigint;
    relayer: string;
    sender: string;
    value: bigint;
    destChainid: bigint;
    additionParams: string;
    message: string;
  };

  export type RollupMessageStructStruct = {
    base: IMessageStruct.SignedMessageBaseStruct;
    params: IMessageStruct.LaunchParamsStruct;
  };

  export type RollupMessageStructStructOutput = [
    base: IMessageStruct.SignedMessageBaseStructOutput,
    params: IMessageStruct.LaunchParamsStructOutput
  ] & {
    base: IMessageStruct.SignedMessageBaseStructOutput;
    params: IMessageStruct.LaunchParamsStructOutput;
  };
}

export interface MessageValidateStationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MessageSaved"
      | "RegistedValidator"
      | "SetupValidator"
      | "SignaturesThreshold"
      | "ValidatorCount"
      | "VerifyLaunchMessage"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "LaunchMessageVerified" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MessageSaved",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "RegistedValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "SetupValidator",
    values: [AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "SignaturesThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ValidatorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VerifyLaunchMessage",
    values: [
      BytesLike[],
      boolean[],
      BytesLike,
      IMessageStruct.RollupMessageStructStruct[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MessageSaved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RegistedValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetupValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SignaturesThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ValidatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VerifyLaunchMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace LaunchMessageVerifiedEvent {
  export type InputTuple = [
    signedMessage: IMessageStruct.RollupMessageStructStruct[]
  ];
  export type OutputTuple = [
    signedMessage: IMessageStruct.RollupMessageStructStructOutput[]
  ];
  export interface OutputObject {
    signedMessage: IMessageStruct.RollupMessageStructStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MessageValidateStation extends BaseContract {
  connect(runner?: ContractRunner | null): MessageValidateStation;
  waitForDeployment(): Promise<this>;

  interface: MessageValidateStationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MessageSaved: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        IMessageStruct.SignedMessageBaseStructOutput,
        IMessageStruct.LaunchParamsStructOutput
      ] & {
        base: IMessageStruct.SignedMessageBaseStructOutput;
        params: IMessageStruct.LaunchParamsStructOutput;
      }
    ],
    "view"
  >;

  RegistedValidator: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  SetupValidator: TypedContractMethod<
    [validators: AddressLike[], statues: boolean[]],
    [void],
    "nonpayable"
  >;

  SignaturesThreshold: TypedContractMethod<[], [bigint], "view">;

  ValidatorCount: TypedContractMethod<[], [bigint], "view">;

  VerifyLaunchMessage: TypedContractMethod<
    [
      proof: BytesLike[],
      proofFlags: boolean[],
      root: BytesLike,
      signedMessage: IMessageStruct.RollupMessageStructStruct[],
      launchParamsSignatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MessageSaved"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        IMessageStruct.SignedMessageBaseStructOutput,
        IMessageStruct.LaunchParamsStructOutput
      ] & {
        base: IMessageStruct.SignedMessageBaseStructOutput;
        params: IMessageStruct.LaunchParamsStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "RegistedValidator"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "SetupValidator"
  ): TypedContractMethod<
    [validators: AddressLike[], statues: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "SignaturesThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ValidatorCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VerifyLaunchMessage"
  ): TypedContractMethod<
    [
      proof: BytesLike[],
      proofFlags: boolean[],
      root: BytesLike,
      signedMessage: IMessageStruct.RollupMessageStructStruct[],
      launchParamsSignatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "LaunchMessageVerified"
  ): TypedContractEvent<
    LaunchMessageVerifiedEvent.InputTuple,
    LaunchMessageVerifiedEvent.OutputTuple,
    LaunchMessageVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "LaunchMessageVerified(tuple[])": TypedContractEvent<
      LaunchMessageVerifiedEvent.InputTuple,
      LaunchMessageVerifiedEvent.OutputTuple,
      LaunchMessageVerifiedEvent.OutputObject
    >;
    LaunchMessageVerified: TypedContractEvent<
      LaunchMessageVerifiedEvent.InputTuple,
      LaunchMessageVerifiedEvent.OutputTuple,
      LaunchMessageVerifiedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
