/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IVizingGasSystem {
  export type ExchangeRateStruct = {
    molecular: BigNumberish;
    denominator: BigNumberish;
    molecularDecimal: BigNumberish;
    denominatorDecimal: BigNumberish;
  };

  export type ExchangeRateStructOutput = [
    molecular: bigint,
    denominator: bigint,
    molecularDecimal: bigint,
    denominatorDecimal: bigint
  ] & {
    molecular: bigint;
    denominator: bigint;
    molecularDecimal: bigint;
    denominatorDecimal: bigint;
  };

  export type FeeConfigStruct = {
    basePrice: BigNumberish;
    reserve: BigNumberish;
    molecular: BigNumberish;
    denominator: BigNumberish;
    molecularDecimal: BigNumberish;
    denominatorDecimal: BigNumberish;
  };

  export type FeeConfigStructOutput = [
    basePrice: bigint,
    reserve: bigint,
    molecular: bigint,
    denominator: bigint,
    molecularDecimal: bigint,
    denominatorDecimal: bigint
  ] & {
    basePrice: bigint;
    reserve: bigint;
    molecular: bigint;
    denominator: bigint;
    molecularDecimal: bigint;
    denominatorDecimal: bigint;
  };

  export type NativeTokenTradeFeeConfigStruct = {
    molecular: BigNumberish;
    denominator: BigNumberish;
  };

  export type NativeTokenTradeFeeConfigStructOutput = [
    molecular: bigint,
    denominator: bigint
  ] & { molecular: bigint; denominator: bigint };
}

export interface VizingGasSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "GAS_MANAGER_ROLE"
      | "SWAP_MANAGER_ROLE"
      | "amountInThreshold"
      | "batchEstimateTotalFee"
      | "batchSetAmountInThreshold"
      | "batchSetChainPriceConfig"
      | "batchSetDAppPriceConfigInDiffChain"
      | "batchSetDAppPriceConfigInSameChain"
      | "batchSetExchangeRate"
      | "batchSetTokenFeeConfig"
      | "batchSetTradeFeeConfigMap"
      | "computeTradeFee(address,uint64,uint256)"
      | "computeTradeFee(uint64,uint256)"
      | "estimateGas"
      | "estimatePrice(uint64)"
      | "estimatePrice(address,uint64)"
      | "estimateTotalFee"
      | "exactInput"
      | "exactOutput"
      | "feeConfigMap"
      | "getAmountInThreshold"
      | "getDAppConfigMap"
      | "getRoleAdmin"
      | "getTokenFeeConfig"
      | "getTradeFeeConfigMap"
      | "globalBasePrice"
      | "globalTradeFee"
      | "grantRole"
      | "hasRole"
      | "renounceRole"
      | "revokeRole"
      | "setAmountInThreshold"
      | "setChainPriceConfig"
      | "setDAppPriceConfig"
      | "setDefaultGasLimit"
      | "setExchangeRate"
      | "setGlobalBasePrice"
      | "setManager"
      | "setTokenFeeConfig"
      | "supportsInterface"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChainPriceConfigSet"
      | "DAppPriceConfigSet"
      | "DefaultGasLimitSet"
      | "GlobalBasePriceSet"
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GAS_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SWAP_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountInThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchEstimateTotalFee",
    values: [BigNumberish[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetAmountInThreshold",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetChainPriceConfig",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetDAppPriceConfigInDiffChain",
    values: [BigNumberish[], AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetDAppPriceConfigInSameChain",
    values: [BigNumberish, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetExchangeRate",
    values: [BigNumberish[], IVizingGasSystem.ExchangeRateStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetTokenFeeConfig",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetTradeFeeConfigMap",
    values: [BigNumberish[], AddressLike[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTradeFee(address,uint64,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTradeFee(uint64,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateGas",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "estimatePrice(uint64)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimatePrice(address,uint64)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateTotalFee",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInput",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutput",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeConfigMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountInThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDAppConfigMap",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenFeeConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeFeeConfigMap",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalBasePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalTradeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountInThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainPriceConfig",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDAppPriceConfig",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangeRate",
    values: [BigNumberish, IVizingGasSystem.ExchangeRateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalBasePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [BytesLike, AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenFeeConfig",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GAS_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SWAP_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountInThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchEstimateTotalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSetAmountInThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSetChainPriceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSetDAppPriceConfigInDiffChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSetDAppPriceConfigInSameChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSetExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSetTokenFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSetTradeFeeConfigMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTradeFee(address,uint64,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTradeFee(uint64,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatePrice(uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatePrice(address,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateTotalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exactInput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exactOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeConfigMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountInThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDAppConfigMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeFeeConfigMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalBasePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalTradeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAmountInThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainPriceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDAppPriceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalBasePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ChainPriceConfigSetEvent {
  export type InputTuple = [chainid: BigNumberish, basePrice: BigNumberish];
  export type OutputTuple = [chainid: bigint, basePrice: bigint];
  export interface OutputObject {
    chainid: bigint;
    basePrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DAppPriceConfigSetEvent {
  export type InputTuple = [
    chainid: BigNumberish,
    dApp: AddressLike,
    basePrice: BigNumberish
  ];
  export type OutputTuple = [chainid: bigint, dApp: string, basePrice: bigint];
  export interface OutputObject {
    chainid: bigint;
    dApp: string;
    basePrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultGasLimitSetEvent {
  export type InputTuple = [gasLimit: BigNumberish];
  export type OutputTuple = [gasLimit: bigint];
  export interface OutputObject {
    gasLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GlobalBasePriceSetEvent {
  export type InputTuple = [price: BigNumberish];
  export type OutputTuple = [price: bigint];
  export interface OutputObject {
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VizingGasSystem extends BaseContract {
  connect(runner?: ContractRunner | null): VizingGasSystem;
  waitForDeployment(): Promise<this>;

  interface: VizingGasSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  GAS_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  SWAP_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  amountInThreshold: TypedContractMethod<[], [bigint], "view">;

  batchEstimateTotalFee: TypedContractMethod<
    [
      amountOut: BigNumberish[],
      destChainid: BigNumberish[],
      message: BytesLike[]
    ],
    [bigint],
    "view"
  >;

  batchSetAmountInThreshold: TypedContractMethod<
    [chainid: BigNumberish[], newValue: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  batchSetChainPriceConfig: TypedContractMethod<
    [chainid: BigNumberish[], basePrice: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  batchSetDAppPriceConfigInDiffChain: TypedContractMethod<
    [chainid: BigNumberish[], dApps: AddressLike[], basePrices: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  batchSetDAppPriceConfigInSameChain: TypedContractMethod<
    [chainid: BigNumberish, dApps: AddressLike[], basePrices: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  batchSetExchangeRate: TypedContractMethod<
    [
      chainid: BigNumberish[],
      exchangeRate: IVizingGasSystem.ExchangeRateStruct[]
    ],
    [void],
    "nonpayable"
  >;

  batchSetTokenFeeConfig: TypedContractMethod<
    [
      destChainid: BigNumberish[],
      molecular: BigNumberish[],
      denominator: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  batchSetTradeFeeConfigMap: TypedContractMethod<
    [
      destChainid: BigNumberish[],
      dApps: AddressLike[],
      molecular: BigNumberish[],
      denominator: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  "computeTradeFee(address,uint64,uint256)": TypedContractMethod<
    [
      targetContract: AddressLike,
      destChainid: BigNumberish,
      amountOut: BigNumberish
    ],
    [bigint],
    "view"
  >;

  "computeTradeFee(uint64,uint256)": TypedContractMethod<
    [destChainid: BigNumberish, amountOut: BigNumberish],
    [bigint],
    "view"
  >;

  estimateGas: TypedContractMethod<
    [amountOut: BigNumberish, destChainid: BigNumberish, message: BytesLike],
    [bigint],
    "view"
  >;

  "estimatePrice(uint64)": TypedContractMethod<
    [destChainid: BigNumberish],
    [bigint],
    "view"
  >;

  "estimatePrice(address,uint64)": TypedContractMethod<
    [targetContract: AddressLike, destChainid: BigNumberish],
    [bigint],
    "view"
  >;

  estimateTotalFee: TypedContractMethod<
    [amountOut: BigNumberish, destChainid: BigNumberish, message: BytesLike],
    [bigint],
    "view"
  >;

  exactInput: TypedContractMethod<
    [destChainid: BigNumberish, amountIn: BigNumberish],
    [bigint],
    "view"
  >;

  exactOutput: TypedContractMethod<
    [destChainid: BigNumberish, amountOut: BigNumberish],
    [bigint],
    "view"
  >;

  feeConfigMap: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        IVizingGasSystem.FeeConfigStructOutput,
        IVizingGasSystem.NativeTokenTradeFeeConfigStructOutput
      ] & {
        feeConfig: IVizingGasSystem.FeeConfigStructOutput;
        tradeFee: IVizingGasSystem.NativeTokenTradeFeeConfigStructOutput;
      }
    ],
    "view"
  >;

  getAmountInThreshold: TypedContractMethod<
    [chainid: BigNumberish],
    [bigint],
    "view"
  >;

  getDAppConfigMap: TypedContractMethod<
    [chainid: BigNumberish, dApp: AddressLike],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTokenFeeConfig: TypedContractMethod<
    [chainid: BigNumberish],
    [IVizingGasSystem.NativeTokenTradeFeeConfigStructOutput],
    "view"
  >;

  getTradeFeeConfigMap: TypedContractMethod<
    [chainid: BigNumberish, dApp: AddressLike],
    [IVizingGasSystem.NativeTokenTradeFeeConfigStructOutput],
    "view"
  >;

  globalBasePrice: TypedContractMethod<[], [bigint], "view">;

  globalTradeFee: TypedContractMethod<
    [],
    [[bigint, bigint] & { molecular: bigint; denominator: bigint }],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAmountInThreshold: TypedContractMethod<
    [newValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  setChainPriceConfig: TypedContractMethod<
    [chainid: BigNumberish, basePrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDAppPriceConfig: TypedContractMethod<
    [chainid: BigNumberish, dApp: AddressLike, basePrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDefaultGasLimit: TypedContractMethod<
    [gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExchangeRate: TypedContractMethod<
    [chainid: BigNumberish, exchangeRate: IVizingGasSystem.ExchangeRateStruct],
    [void],
    "nonpayable"
  >;

  setGlobalBasePrice: TypedContractMethod<
    [price: BigNumberish],
    [void],
    "nonpayable"
  >;

  setManager: TypedContractMethod<
    [role: BytesLike, accounts: AddressLike[], states: boolean[]],
    [void],
    "nonpayable"
  >;

  setTokenFeeConfig: TypedContractMethod<
    [molecular: BigNumberish, denominator: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GAS_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SWAP_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "amountInThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchEstimateTotalFee"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish[],
      destChainid: BigNumberish[],
      message: BytesLike[]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchSetAmountInThreshold"
  ): TypedContractMethod<
    [chainid: BigNumberish[], newValue: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchSetChainPriceConfig"
  ): TypedContractMethod<
    [chainid: BigNumberish[], basePrice: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchSetDAppPriceConfigInDiffChain"
  ): TypedContractMethod<
    [chainid: BigNumberish[], dApps: AddressLike[], basePrices: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchSetDAppPriceConfigInSameChain"
  ): TypedContractMethod<
    [chainid: BigNumberish, dApps: AddressLike[], basePrices: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchSetExchangeRate"
  ): TypedContractMethod<
    [
      chainid: BigNumberish[],
      exchangeRate: IVizingGasSystem.ExchangeRateStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchSetTokenFeeConfig"
  ): TypedContractMethod<
    [
      destChainid: BigNumberish[],
      molecular: BigNumberish[],
      denominator: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchSetTradeFeeConfigMap"
  ): TypedContractMethod<
    [
      destChainid: BigNumberish[],
      dApps: AddressLike[],
      molecular: BigNumberish[],
      denominator: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "computeTradeFee(address,uint64,uint256)"
  ): TypedContractMethod<
    [
      targetContract: AddressLike,
      destChainid: BigNumberish,
      amountOut: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeTradeFee(uint64,uint256)"
  ): TypedContractMethod<
    [destChainid: BigNumberish, amountOut: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "estimateGas"
  ): TypedContractMethod<
    [amountOut: BigNumberish, destChainid: BigNumberish, message: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "estimatePrice(uint64)"
  ): TypedContractMethod<[destChainid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "estimatePrice(address,uint64)"
  ): TypedContractMethod<
    [targetContract: AddressLike, destChainid: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "estimateTotalFee"
  ): TypedContractMethod<
    [amountOut: BigNumberish, destChainid: BigNumberish, message: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "exactInput"
  ): TypedContractMethod<
    [destChainid: BigNumberish, amountIn: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "exactOutput"
  ): TypedContractMethod<
    [destChainid: BigNumberish, amountOut: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeConfigMap"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        IVizingGasSystem.FeeConfigStructOutput,
        IVizingGasSystem.NativeTokenTradeFeeConfigStructOutput
      ] & {
        feeConfig: IVizingGasSystem.FeeConfigStructOutput;
        tradeFee: IVizingGasSystem.NativeTokenTradeFeeConfigStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAmountInThreshold"
  ): TypedContractMethod<[chainid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDAppConfigMap"
  ): TypedContractMethod<
    [chainid: BigNumberish, dApp: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenFeeConfig"
  ): TypedContractMethod<
    [chainid: BigNumberish],
    [IVizingGasSystem.NativeTokenTradeFeeConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTradeFeeConfigMap"
  ): TypedContractMethod<
    [chainid: BigNumberish, dApp: AddressLike],
    [IVizingGasSystem.NativeTokenTradeFeeConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalBasePrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "globalTradeFee"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { molecular: bigint; denominator: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAmountInThreshold"
  ): TypedContractMethod<[newValue: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setChainPriceConfig"
  ): TypedContractMethod<
    [chainid: BigNumberish, basePrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDAppPriceConfig"
  ): TypedContractMethod<
    [chainid: BigNumberish, dApp: AddressLike, basePrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultGasLimit"
  ): TypedContractMethod<[gasLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setExchangeRate"
  ): TypedContractMethod<
    [chainid: BigNumberish, exchangeRate: IVizingGasSystem.ExchangeRateStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGlobalBasePrice"
  ): TypedContractMethod<[price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setManager"
  ): TypedContractMethod<
    [role: BytesLike, accounts: AddressLike[], states: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenFeeConfig"
  ): TypedContractMethod<
    [molecular: BigNumberish, denominator: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ChainPriceConfigSet"
  ): TypedContractEvent<
    ChainPriceConfigSetEvent.InputTuple,
    ChainPriceConfigSetEvent.OutputTuple,
    ChainPriceConfigSetEvent.OutputObject
  >;
  getEvent(
    key: "DAppPriceConfigSet"
  ): TypedContractEvent<
    DAppPriceConfigSetEvent.InputTuple,
    DAppPriceConfigSetEvent.OutputTuple,
    DAppPriceConfigSetEvent.OutputObject
  >;
  getEvent(
    key: "DefaultGasLimitSet"
  ): TypedContractEvent<
    DefaultGasLimitSetEvent.InputTuple,
    DefaultGasLimitSetEvent.OutputTuple,
    DefaultGasLimitSetEvent.OutputObject
  >;
  getEvent(
    key: "GlobalBasePriceSet"
  ): TypedContractEvent<
    GlobalBasePriceSetEvent.InputTuple,
    GlobalBasePriceSetEvent.OutputTuple,
    GlobalBasePriceSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "ChainPriceConfigSet(uint64,uint64)": TypedContractEvent<
      ChainPriceConfigSetEvent.InputTuple,
      ChainPriceConfigSetEvent.OutputTuple,
      ChainPriceConfigSetEvent.OutputObject
    >;
    ChainPriceConfigSet: TypedContractEvent<
      ChainPriceConfigSetEvent.InputTuple,
      ChainPriceConfigSetEvent.OutputTuple,
      ChainPriceConfigSetEvent.OutputObject
    >;

    "DAppPriceConfigSet(uint64,address,uint64)": TypedContractEvent<
      DAppPriceConfigSetEvent.InputTuple,
      DAppPriceConfigSetEvent.OutputTuple,
      DAppPriceConfigSetEvent.OutputObject
    >;
    DAppPriceConfigSet: TypedContractEvent<
      DAppPriceConfigSetEvent.InputTuple,
      DAppPriceConfigSetEvent.OutputTuple,
      DAppPriceConfigSetEvent.OutputObject
    >;

    "DefaultGasLimitSet(uint24)": TypedContractEvent<
      DefaultGasLimitSetEvent.InputTuple,
      DefaultGasLimitSetEvent.OutputTuple,
      DefaultGasLimitSetEvent.OutputObject
    >;
    DefaultGasLimitSet: TypedContractEvent<
      DefaultGasLimitSetEvent.InputTuple,
      DefaultGasLimitSetEvent.OutputTuple,
      DefaultGasLimitSetEvent.OutputObject
    >;

    "GlobalBasePriceSet(uint64)": TypedContractEvent<
      GlobalBasePriceSetEvent.InputTuple,
      GlobalBasePriceSetEvent.OutputTuple,
      GlobalBasePriceSetEvent.OutputObject
    >;
    GlobalBasePriceSet: TypedContractEvent<
      GlobalBasePriceSetEvent.InputTuple,
      GlobalBasePriceSetEvent.OutputTuple,
      GlobalBasePriceSetEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
