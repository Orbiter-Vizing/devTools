/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDepositSpaceStationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Withdraw"
      | "fetchMinimalDeposit"
      | "fetchMinimalWithdrawDelay"
      | "register"
      | "setMinimalDeposit"
      | "setMinimalWithdrawDelay"
      | "setSubmitter"
      | "submitSmtRoot"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Register"
      | "ValidatorWithdraw"
      | "WithdrawRequestEmit"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "Withdraw",
    values: [BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMinimalDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMinimalWithdrawDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "register", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMinimalDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimalWithdrawDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubmitter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitSmtRoot",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "Withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchMinimalDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMinimalWithdrawDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinimalDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimalWithdrawDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitSmtRoot",
    data: BytesLike
  ): Result;
}

export namespace RegisterEvent {
  export type InputTuple = [newValidator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [newValidator: string, amount: bigint];
  export interface OutputObject {
    newValidator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorWithdrawEvent {
  export type InputTuple = [validator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [validator: string, amount: bigint];
  export interface OutputObject {
    validator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawRequestEmitEvent {
  export type InputTuple = [
    validator: AddressLike,
    targetWithdrawTime: BigNumberish
  ];
  export type OutputTuple = [validator: string, targetWithdrawTime: bigint];
  export interface OutputObject {
    validator: string;
    targetWithdrawTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDepositSpaceStation extends BaseContract {
  connect(runner?: ContractRunner | null): IDepositSpaceStation;
  waitForDeployment(): Promise<this>;

  interface: IDepositSpaceStationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Withdraw: TypedContractMethod<
    [proof: BytesLike[], amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  fetchMinimalDeposit: TypedContractMethod<[], [bigint], "view">;

  fetchMinimalWithdrawDelay: TypedContractMethod<[], [bigint], "view">;

  register: TypedContractMethod<[], [void], "payable">;

  setMinimalDeposit: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinimalWithdrawDelay: TypedContractMethod<
    [delaySeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSubmitter: TypedContractMethod<
    [newSubmitter: AddressLike],
    [void],
    "nonpayable"
  >;

  submitSmtRoot: TypedContractMethod<[root: BytesLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Withdraw"
  ): TypedContractMethod<
    [proof: BytesLike[], amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fetchMinimalDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fetchMinimalWithdrawDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "setMinimalDeposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinimalWithdrawDelay"
  ): TypedContractMethod<[delaySeconds: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSubmitter"
  ): TypedContractMethod<[newSubmitter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitSmtRoot"
  ): TypedContractMethod<[root: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "Register"
  ): TypedContractEvent<
    RegisterEvent.InputTuple,
    RegisterEvent.OutputTuple,
    RegisterEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorWithdraw"
  ): TypedContractEvent<
    ValidatorWithdrawEvent.InputTuple,
    ValidatorWithdrawEvent.OutputTuple,
    ValidatorWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawRequestEmit"
  ): TypedContractEvent<
    WithdrawRequestEmitEvent.InputTuple,
    WithdrawRequestEmitEvent.OutputTuple,
    WithdrawRequestEmitEvent.OutputObject
  >;

  filters: {
    "Register(address,uint256)": TypedContractEvent<
      RegisterEvent.InputTuple,
      RegisterEvent.OutputTuple,
      RegisterEvent.OutputObject
    >;
    Register: TypedContractEvent<
      RegisterEvent.InputTuple,
      RegisterEvent.OutputTuple,
      RegisterEvent.OutputObject
    >;

    "ValidatorWithdraw(address,uint256)": TypedContractEvent<
      ValidatorWithdrawEvent.InputTuple,
      ValidatorWithdrawEvent.OutputTuple,
      ValidatorWithdrawEvent.OutputObject
    >;
    ValidatorWithdraw: TypedContractEvent<
      ValidatorWithdrawEvent.InputTuple,
      ValidatorWithdrawEvent.OutputTuple,
      ValidatorWithdrawEvent.OutputObject
    >;

    "WithdrawRequestEmit(address,uint64)": TypedContractEvent<
      WithdrawRequestEmitEvent.InputTuple,
      WithdrawRequestEmitEvent.OutputTuple,
      WithdrawRequestEmitEvent.OutputObject
    >;
    WithdrawRequestEmit: TypedContractEvent<
      WithdrawRequestEmitEvent.InputTuple,
      WithdrawRequestEmitEvent.OutputTuple,
      WithdrawRequestEmitEvent.OutputObject
    >;
  };
}
