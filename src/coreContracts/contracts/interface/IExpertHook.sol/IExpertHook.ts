/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IExpertHook {
  export type TokenBaseStruct = {
    symbol: BytesLike;
    decimals: BigNumberish;
    maxPrice: BigNumberish;
  };

  export type TokenBaseStructOutput = [
    symbol: string,
    decimals: bigint,
    maxPrice: bigint
  ] & { symbol: string; decimals: bigint; maxPrice: bigint };
}

export declare namespace IMessageStruct {
  export type LandingParamsStruct = {
    messageId: BytesLike;
    earliestArrivalTimestamp: BigNumberish;
    latestArrivalTimestamp: BigNumberish;
    srcChainid: BigNumberish;
    srcTxHash: BytesLike;
    srcContract: BigNumberish;
    srcChainNonce: BigNumberish;
    sender: BigNumberish;
    value: BigNumberish;
    additionParams: BytesLike;
    message: BytesLike;
  };

  export type LandingParamsStructOutput = [
    messageId: string,
    earliestArrivalTimestamp: bigint,
    latestArrivalTimestamp: bigint,
    srcChainid: bigint,
    srcTxHash: string,
    srcContract: bigint,
    srcChainNonce: bigint,
    sender: bigint,
    value: bigint,
    additionParams: string,
    message: string
  ] & {
    messageId: string;
    earliestArrivalTimestamp: bigint;
    latestArrivalTimestamp: bigint;
    srcChainid: bigint;
    srcTxHash: string;
    srcContract: bigint;
    srcChainNonce: bigint;
    sender: bigint;
    value: bigint;
    additionParams: string;
    message: string;
  };
}

export interface IExpertHookInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "computeTotalAmont"
      | "getTokenAddressBySymbol"
      | "getTokenInfoBase"
      | "handleLanding"
      | "handleLaunch"
      | "isETH"
      | "setDefaultGasLimit"
      | "setGlobalTradeFee"
      | "setManager"
      | "setTokenInfoBase"
      | "setTokenTradeFeeMap"
      | "setVizingPadAddress"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeTotalAmont",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddressBySymbol",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfoBase",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleLanding",
    values: [IMessageStruct.LandingParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "handleLaunch",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isETH", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setDefaultGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalTradeFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [BytesLike, AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenInfoBase",
    values: [BytesLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenTradeFeeMap",
    values: [AddressLike, BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVizingPadAddress",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeTotalAmont",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddressBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfoBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleLanding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleLaunch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalTradeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenInfoBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenTradeFeeMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVizingPadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface IExpertHook extends BaseContract {
  connect(runner?: ContractRunner | null): IExpertHook;
  waitForDeployment(): Promise<this>;

  interface: IExpertHookInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  computeTotalAmont: TypedContractMethod<
    [
      destChainid: BigNumberish,
      token: AddressLike,
      expectAmountReceive: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getTokenAddressBySymbol: TypedContractMethod<
    [symbol: BytesLike],
    [string],
    "view"
  >;

  getTokenInfoBase: TypedContractMethod<
    [tokenAddress: AddressLike],
    [IExpertHook.TokenBaseStructOutput],
    "view"
  >;

  handleLanding: TypedContractMethod<
    [params: IMessageStruct.LandingParamsStruct],
    [[boolean, string] & { success: boolean }],
    "nonpayable"
  >;

  handleLaunch: TypedContractMethod<
    [vizingPadCalldata: BytesLike],
    [[boolean, string] & { success: boolean }],
    "nonpayable"
  >;

  isETH: TypedContractMethod<[token: AddressLike], [boolean], "view">;

  setDefaultGasLimit: TypedContractMethod<
    [gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setGlobalTradeFee: TypedContractMethod<
    [molecular: BigNumberish, denominator: BigNumberish],
    [void],
    "nonpayable"
  >;

  setManager: TypedContractMethod<
    [role: BytesLike, accounts: AddressLike[], states: boolean[]],
    [void],
    "nonpayable"
  >;

  setTokenInfoBase: TypedContractMethod<
    [
      symbol: BytesLike,
      tokenAddress: AddressLike,
      decimals: BigNumberish,
      maxPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setTokenTradeFeeMap: TypedContractMethod<
    [
      tokenAddress: AddressLike,
      chainId: BigNumberish[],
      molecular: BigNumberish[],
      denominator: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  setVizingPadAddress: TypedContractMethod<
    [_vizingPadLaunch: AddressLike, _vizingPadLanding: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "computeTotalAmont"
  ): TypedContractMethod<
    [
      destChainid: BigNumberish,
      token: AddressLike,
      expectAmountReceive: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenAddressBySymbol"
  ): TypedContractMethod<[symbol: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenInfoBase"
  ): TypedContractMethod<
    [tokenAddress: AddressLike],
    [IExpertHook.TokenBaseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "handleLanding"
  ): TypedContractMethod<
    [params: IMessageStruct.LandingParamsStruct],
    [[boolean, string] & { success: boolean }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleLaunch"
  ): TypedContractMethod<
    [vizingPadCalldata: BytesLike],
    [[boolean, string] & { success: boolean }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isETH"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setDefaultGasLimit"
  ): TypedContractMethod<[gasLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGlobalTradeFee"
  ): TypedContractMethod<
    [molecular: BigNumberish, denominator: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setManager"
  ): TypedContractMethod<
    [role: BytesLike, accounts: AddressLike[], states: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenInfoBase"
  ): TypedContractMethod<
    [
      symbol: BytesLike,
      tokenAddress: AddressLike,
      decimals: BigNumberish,
      maxPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenTradeFeeMap"
  ): TypedContractMethod<
    [
      tokenAddress: AddressLike,
      chainId: BigNumberish[],
      molecular: BigNumberish[],
      denominator: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVizingPadAddress"
  ): TypedContractMethod<
    [_vizingPadLaunch: AddressLike, _vizingPadLanding: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
