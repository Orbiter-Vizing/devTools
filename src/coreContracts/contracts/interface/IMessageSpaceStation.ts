/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IMessageStruct {
  export type LandingParamsStruct = {
    messageId: BytesLike;
    earliestArrivalTimestamp: BigNumberish;
    latestArrivalTimestamp: BigNumberish;
    srcChainid: BigNumberish;
    srcTxHash: BytesLike;
    srcContract: BigNumberish;
    srcChainNonce: BigNumberish;
    sender: BigNumberish;
    value: BigNumberish;
    additionParams: BytesLike;
    message: BytesLike;
  };

  export type LandingParamsStructOutput = [
    messageId: string,
    earliestArrivalTimestamp: bigint,
    latestArrivalTimestamp: bigint,
    srcChainid: bigint,
    srcTxHash: string,
    srcContract: bigint,
    srcChainNonce: bigint,
    sender: bigint,
    value: bigint,
    additionParams: string,
    message: string
  ] & {
    messageId: string;
    earliestArrivalTimestamp: bigint;
    latestArrivalTimestamp: bigint;
    srcChainid: bigint;
    srcTxHash: string;
    srcContract: bigint;
    srcChainNonce: bigint;
    sender: bigint;
    value: bigint;
    additionParams: string;
    message: string;
  };

  export type LaunchEnhanceParamsStruct = {
    earliestArrivalTimestamp: BigNumberish;
    latestArrivalTimestamp: BigNumberish;
    relayer: AddressLike;
    sender: AddressLike;
    value: BigNumberish[];
    destChainid: BigNumberish[];
    additionParams: BytesLike[];
    message: BytesLike[];
  };

  export type LaunchEnhanceParamsStructOutput = [
    earliestArrivalTimestamp: bigint,
    latestArrivalTimestamp: bigint,
    relayer: string,
    sender: string,
    value: bigint[],
    destChainid: bigint[],
    additionParams: string[],
    message: string[]
  ] & {
    earliestArrivalTimestamp: bigint;
    latestArrivalTimestamp: bigint;
    relayer: string;
    sender: string;
    value: bigint[];
    destChainid: bigint[];
    additionParams: string[];
    message: string[];
  };
}

export interface IMessageSpaceStationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Chainid"
      | "EstimateExecuteGas"
      | "GetNonceLanding"
      | "GetNonceLaunch"
      | "Landing"
      | "LandingSpecifiedGas"
      | "Launch"
      | "PauseEngine"
      | "SimulateLanding"
      | "Version"
      | "Withdraw"
      | "engineState"
      | "estimateGas(uint256[],uint64[],bytes[],bytes[])"
      | "estimateGas(uint256,uint64,bytes,bytes)"
      | "estimatePrice"
      | "expertLandingHook"
      | "expertLaunchHook"
      | "gasSystemAddr"
      | "launchMultiChain"
      | "maxArrivalTime"
      | "minArrivalTime"
      | "padState"
      | "roleConfiguration"
      | "setExpertLandingHooks"
      | "setExpertLaunchHooks"
      | "setGasSystem"
      | "stationAdminSetRole"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EngineStateRefreshing"
      | "PaymentSystemChanging"
      | "SuccessfulLanding"
      | "SuccessfulLaunchMessage"
      | "SuccessfulLaunchMultiMessages"
      | "WithdrawRequest"
  ): EventFragment;

  encodeFunctionData(functionFragment: "Chainid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "EstimateExecuteGas",
    values: [IMessageStruct.LandingParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "GetNonceLanding",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "GetNonceLaunch",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "Landing",
    values: [IMessageStruct.LandingParamsStruct[], BytesLike[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "LandingSpecifiedGas",
    values: [IMessageStruct.LandingParamsStruct[], BigNumberish, BytesLike[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "Launch",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "PauseEngine",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "SimulateLanding",
    values: [IMessageStruct.LandingParamsStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "Version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "Withdraw",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "engineState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateGas(uint256[],uint64[],bytes[],bytes[])",
    values: [BigNumberish[], BigNumberish[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateGas(uint256,uint64,bytes,bytes)",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "estimatePrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expertLandingHook",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expertLaunchHook",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gasSystemAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "launchMultiChain",
    values: [IMessageStruct.LaunchEnhanceParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "maxArrivalTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minArrivalTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "padState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "roleConfiguration",
    values: [BytesLike, AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpertLandingHooks",
    values: [BytesLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpertLaunchHooks",
    values: [BytesLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasSystem",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stationAdminSetRole",
    values: [BytesLike, AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "Chainid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "EstimateExecuteGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetNonceLanding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetNonceLaunch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Landing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LandingSpecifiedGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Launch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PauseEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SimulateLanding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "engineState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateGas(uint256[],uint64[],bytes[],bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateGas(uint256,uint64,bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expertLandingHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expertLaunchHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasSystemAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchMultiChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxArrivalTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minArrivalTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "padState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpertLandingHooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpertLaunchHooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stationAdminSetRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace EngineStateRefreshingEvent {
  export type InputTuple = [isPause: boolean];
  export type OutputTuple = [isPause: boolean];
  export interface OutputObject {
    isPause: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentSystemChangingEvent {
  export type InputTuple = [gasSystemAddress: AddressLike];
  export type OutputTuple = [gasSystemAddress: string];
  export interface OutputObject {
    gasSystemAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuccessfulLandingEvent {
  export type InputTuple = [
    messageId: BytesLike,
    params: IMessageStruct.LandingParamsStruct
  ];
  export type OutputTuple = [
    messageId: string,
    params: IMessageStruct.LandingParamsStructOutput
  ];
  export interface OutputObject {
    messageId: string;
    params: IMessageStruct.LandingParamsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuccessfulLaunchMessageEvent {
  export type InputTuple = [
    nonce: BigNumberish,
    earliestArrivalTimestamp: BigNumberish,
    latestArrivalTimestamp: BigNumberish,
    relayer: AddressLike,
    sender: AddressLike,
    srcContract: AddressLike,
    value: BigNumberish,
    destChainid: BigNumberish,
    additionParams: BytesLike,
    message: BytesLike
  ];
  export type OutputTuple = [
    nonce: bigint,
    earliestArrivalTimestamp: bigint,
    latestArrivalTimestamp: bigint,
    relayer: string,
    sender: string,
    srcContract: string,
    value: bigint,
    destChainid: bigint,
    additionParams: string,
    message: string
  ];
  export interface OutputObject {
    nonce: bigint;
    earliestArrivalTimestamp: bigint;
    latestArrivalTimestamp: bigint;
    relayer: string;
    sender: string;
    srcContract: string;
    value: bigint;
    destChainid: bigint;
    additionParams: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuccessfulLaunchMultiMessagesEvent {
  export type InputTuple = [
    nonce: BigNumberish[],
    earliestArrivalTimestamp: BigNumberish,
    latestArrivalTimestamp: BigNumberish,
    relayer: AddressLike,
    sender: AddressLike,
    srcContract: AddressLike,
    value: BigNumberish[],
    destChainid: BigNumberish[],
    additionParams: BytesLike[],
    message: BytesLike[]
  ];
  export type OutputTuple = [
    nonce: bigint[],
    earliestArrivalTimestamp: bigint,
    latestArrivalTimestamp: bigint,
    relayer: string,
    sender: string,
    srcContract: string,
    value: bigint[],
    destChainid: bigint[],
    additionParams: string[],
    message: string[]
  ];
  export interface OutputObject {
    nonce: bigint[];
    earliestArrivalTimestamp: bigint;
    latestArrivalTimestamp: bigint;
    relayer: string;
    sender: string;
    srcContract: string;
    value: bigint[];
    destChainid: bigint[];
    additionParams: string[];
    message: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawRequestEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMessageSpaceStation extends BaseContract {
  connect(runner?: ContractRunner | null): IMessageSpaceStation;
  waitForDeployment(): Promise<this>;

  interface: IMessageSpaceStationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Chainid: TypedContractMethod<[], [bigint], "view">;

  EstimateExecuteGas: TypedContractMethod<
    [params: IMessageStruct.LandingParamsStruct[]],
    [boolean[]],
    "nonpayable"
  >;

  GetNonceLanding: TypedContractMethod<
    [chainId: BigNumberish, sender: AddressLike],
    [bigint],
    "view"
  >;

  GetNonceLaunch: TypedContractMethod<
    [chainId: BigNumberish, sender: AddressLike],
    [bigint],
    "view"
  >;

  Landing: TypedContractMethod<
    [params: IMessageStruct.LandingParamsStruct[], proofs: BytesLike[][]],
    [void],
    "payable"
  >;

  LandingSpecifiedGas: TypedContractMethod<
    [
      params: IMessageStruct.LandingParamsStruct[],
      gasLimit: BigNumberish,
      proofs: BytesLike[][]
    ],
    [void],
    "payable"
  >;

  Launch: TypedContractMethod<
    [
      earliestArrivalTimestamp: BigNumberish,
      latestArrivalTimestamp: BigNumberish,
      relayer: AddressLike,
      sender: AddressLike,
      value: BigNumberish,
      destChainid: BigNumberish,
      additionParams: BytesLike,
      message: BytesLike
    ],
    [void],
    "payable"
  >;

  PauseEngine: TypedContractMethod<[stop: boolean], [void], "nonpayable">;

  SimulateLanding: TypedContractMethod<
    [params: IMessageStruct.LandingParamsStruct[]],
    [void],
    "payable"
  >;

  Version: TypedContractMethod<[], [string], "view">;

  Withdraw: TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  engineState: TypedContractMethod<[], [bigint], "view">;

  "estimateGas(uint256[],uint64[],bytes[],bytes[])": TypedContractMethod<
    [
      value: BigNumberish[],
      destChainid: BigNumberish[],
      additionParams: BytesLike[],
      message: BytesLike[]
    ],
    [bigint],
    "view"
  >;

  "estimateGas(uint256,uint64,bytes,bytes)": TypedContractMethod<
    [
      value: BigNumberish,
      destChainid: BigNumberish,
      additionParams: BytesLike,
      message: BytesLike
    ],
    [bigint],
    "view"
  >;

  estimatePrice: TypedContractMethod<
    [sender: AddressLike, destChainid: BigNumberish],
    [bigint],
    "view"
  >;

  expertLandingHook: TypedContractMethod<[hook: BytesLike], [string], "view">;

  expertLaunchHook: TypedContractMethod<[hook: BytesLike], [string], "view">;

  gasSystemAddr: TypedContractMethod<[], [string], "view">;

  launchMultiChain: TypedContractMethod<
    [params: IMessageStruct.LaunchEnhanceParamsStruct],
    [void],
    "payable"
  >;

  maxArrivalTime: TypedContractMethod<[], [bigint], "view">;

  minArrivalTime: TypedContractMethod<[], [bigint], "view">;

  padState: TypedContractMethod<[], [[bigint, bigint]], "view">;

  roleConfiguration: TypedContractMethod<
    [role: BytesLike, accounts: AddressLike[], states: boolean[]],
    [void],
    "nonpayable"
  >;

  setExpertLandingHooks: TypedContractMethod<
    [ids: BytesLike[], hooks: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setExpertLaunchHooks: TypedContractMethod<
    [ids: BytesLike[], hooks: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setGasSystem: TypedContractMethod<
    [gasSystemAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  stationAdminSetRole: TypedContractMethod<
    [role: BytesLike, accounts: AddressLike[], states: boolean[]],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Chainid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EstimateExecuteGas"
  ): TypedContractMethod<
    [params: IMessageStruct.LandingParamsStruct[]],
    [boolean[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "GetNonceLanding"
  ): TypedContractMethod<
    [chainId: BigNumberish, sender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "GetNonceLaunch"
  ): TypedContractMethod<
    [chainId: BigNumberish, sender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "Landing"
  ): TypedContractMethod<
    [params: IMessageStruct.LandingParamsStruct[], proofs: BytesLike[][]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "LandingSpecifiedGas"
  ): TypedContractMethod<
    [
      params: IMessageStruct.LandingParamsStruct[],
      gasLimit: BigNumberish,
      proofs: BytesLike[][]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "Launch"
  ): TypedContractMethod<
    [
      earliestArrivalTimestamp: BigNumberish,
      latestArrivalTimestamp: BigNumberish,
      relayer: AddressLike,
      sender: AddressLike,
      value: BigNumberish,
      destChainid: BigNumberish,
      additionParams: BytesLike,
      message: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "PauseEngine"
  ): TypedContractMethod<[stop: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "SimulateLanding"
  ): TypedContractMethod<
    [params: IMessageStruct.LandingParamsStruct[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "Version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "Withdraw"
  ): TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "engineState"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "estimateGas(uint256[],uint64[],bytes[],bytes[])"
  ): TypedContractMethod<
    [
      value: BigNumberish[],
      destChainid: BigNumberish[],
      additionParams: BytesLike[],
      message: BytesLike[]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "estimateGas(uint256,uint64,bytes,bytes)"
  ): TypedContractMethod<
    [
      value: BigNumberish,
      destChainid: BigNumberish,
      additionParams: BytesLike,
      message: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "estimatePrice"
  ): TypedContractMethod<
    [sender: AddressLike, destChainid: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "expertLandingHook"
  ): TypedContractMethod<[hook: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "expertLaunchHook"
  ): TypedContractMethod<[hook: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "gasSystemAddr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "launchMultiChain"
  ): TypedContractMethod<
    [params: IMessageStruct.LaunchEnhanceParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "maxArrivalTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minArrivalTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "padState"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "roleConfiguration"
  ): TypedContractMethod<
    [role: BytesLike, accounts: AddressLike[], states: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExpertLandingHooks"
  ): TypedContractMethod<
    [ids: BytesLike[], hooks: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExpertLaunchHooks"
  ): TypedContractMethod<
    [ids: BytesLike[], hooks: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGasSystem"
  ): TypedContractMethod<[gasSystemAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stationAdminSetRole"
  ): TypedContractMethod<
    [role: BytesLike, accounts: AddressLike[], states: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "EngineStateRefreshing"
  ): TypedContractEvent<
    EngineStateRefreshingEvent.InputTuple,
    EngineStateRefreshingEvent.OutputTuple,
    EngineStateRefreshingEvent.OutputObject
  >;
  getEvent(
    key: "PaymentSystemChanging"
  ): TypedContractEvent<
    PaymentSystemChangingEvent.InputTuple,
    PaymentSystemChangingEvent.OutputTuple,
    PaymentSystemChangingEvent.OutputObject
  >;
  getEvent(
    key: "SuccessfulLanding"
  ): TypedContractEvent<
    SuccessfulLandingEvent.InputTuple,
    SuccessfulLandingEvent.OutputTuple,
    SuccessfulLandingEvent.OutputObject
  >;
  getEvent(
    key: "SuccessfulLaunchMessage"
  ): TypedContractEvent<
    SuccessfulLaunchMessageEvent.InputTuple,
    SuccessfulLaunchMessageEvent.OutputTuple,
    SuccessfulLaunchMessageEvent.OutputObject
  >;
  getEvent(
    key: "SuccessfulLaunchMultiMessages"
  ): TypedContractEvent<
    SuccessfulLaunchMultiMessagesEvent.InputTuple,
    SuccessfulLaunchMultiMessagesEvent.OutputTuple,
    SuccessfulLaunchMultiMessagesEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawRequest"
  ): TypedContractEvent<
    WithdrawRequestEvent.InputTuple,
    WithdrawRequestEvent.OutputTuple,
    WithdrawRequestEvent.OutputObject
  >;

  filters: {
    "EngineStateRefreshing(bool)": TypedContractEvent<
      EngineStateRefreshingEvent.InputTuple,
      EngineStateRefreshingEvent.OutputTuple,
      EngineStateRefreshingEvent.OutputObject
    >;
    EngineStateRefreshing: TypedContractEvent<
      EngineStateRefreshingEvent.InputTuple,
      EngineStateRefreshingEvent.OutputTuple,
      EngineStateRefreshingEvent.OutputObject
    >;

    "PaymentSystemChanging(address)": TypedContractEvent<
      PaymentSystemChangingEvent.InputTuple,
      PaymentSystemChangingEvent.OutputTuple,
      PaymentSystemChangingEvent.OutputObject
    >;
    PaymentSystemChanging: TypedContractEvent<
      PaymentSystemChangingEvent.InputTuple,
      PaymentSystemChangingEvent.OutputTuple,
      PaymentSystemChangingEvent.OutputObject
    >;

    "SuccessfulLanding(bytes32,tuple)": TypedContractEvent<
      SuccessfulLandingEvent.InputTuple,
      SuccessfulLandingEvent.OutputTuple,
      SuccessfulLandingEvent.OutputObject
    >;
    SuccessfulLanding: TypedContractEvent<
      SuccessfulLandingEvent.InputTuple,
      SuccessfulLandingEvent.OutputTuple,
      SuccessfulLandingEvent.OutputObject
    >;

    "SuccessfulLaunchMessage(uint32,uint64,uint64,address,address,address,uint256,uint64,bytes,bytes)": TypedContractEvent<
      SuccessfulLaunchMessageEvent.InputTuple,
      SuccessfulLaunchMessageEvent.OutputTuple,
      SuccessfulLaunchMessageEvent.OutputObject
    >;
    SuccessfulLaunchMessage: TypedContractEvent<
      SuccessfulLaunchMessageEvent.InputTuple,
      SuccessfulLaunchMessageEvent.OutputTuple,
      SuccessfulLaunchMessageEvent.OutputObject
    >;

    "SuccessfulLaunchMultiMessages(uint32[],uint64,uint64,address,address,address,uint256[],uint64[],bytes[],bytes[])": TypedContractEvent<
      SuccessfulLaunchMultiMessagesEvent.InputTuple,
      SuccessfulLaunchMultiMessagesEvent.OutputTuple,
      SuccessfulLaunchMultiMessagesEvent.OutputObject
    >;
    SuccessfulLaunchMultiMessages: TypedContractEvent<
      SuccessfulLaunchMultiMessagesEvent.InputTuple,
      SuccessfulLaunchMultiMessagesEvent.OutputTuple,
      SuccessfulLaunchMultiMessagesEvent.OutputObject
    >;

    "WithdrawRequest(address,uint256)": TypedContractEvent<
      WithdrawRequestEvent.InputTuple,
      WithdrawRequestEvent.OutputTuple,
      WithdrawRequestEvent.OutputObject
    >;
    WithdrawRequest: TypedContractEvent<
      WithdrawRequestEvent.InputTuple,
      WithdrawRequestEvent.OutputTuple,
      WithdrawRequestEvent.OutputObject
    >;
  };
}
