/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export declare namespace IMessageStruct {
  export type LandingParamsStruct = {
    messageId: BytesLike;
    earliestArrivalTimestamp: BigNumberish;
    latestArrivalTimestamp: BigNumberish;
    srcChainid: BigNumberish;
    srcTxHash: BytesLike;
    srcContract: BigNumberish;
    srcChainNonce: BigNumberish;
    sender: BigNumberish;
    value: BigNumberish;
    additionParams: BytesLike;
    message: BytesLike;
  };

  export type LandingParamsStructOutput = [
    messageId: string,
    earliestArrivalTimestamp: bigint,
    latestArrivalTimestamp: bigint,
    srcChainid: bigint,
    srcTxHash: string,
    srcContract: bigint,
    srcChainNonce: bigint,
    sender: bigint,
    value: bigint,
    additionParams: string,
    message: string
  ] & {
    messageId: string;
    earliestArrivalTimestamp: bigint;
    latestArrivalTimestamp: bigint;
    srcChainid: bigint;
    srcTxHash: string;
    srcContract: bigint;
    srcChainNonce: bigint;
    sender: bigint;
    value: bigint;
    additionParams: string;
    message: string;
  };
}

export interface IMessageEventInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "EngineStateRefreshing"
      | "PaymentSystemChanging"
      | "SuccessfulLanding"
      | "SuccessfulLaunchMessage"
      | "SuccessfulLaunchMultiMessages"
      | "WithdrawRequest"
  ): EventFragment;
}

export namespace EngineStateRefreshingEvent {
  export type InputTuple = [isPause: boolean];
  export type OutputTuple = [isPause: boolean];
  export interface OutputObject {
    isPause: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentSystemChangingEvent {
  export type InputTuple = [gasSystemAddress: AddressLike];
  export type OutputTuple = [gasSystemAddress: string];
  export interface OutputObject {
    gasSystemAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuccessfulLandingEvent {
  export type InputTuple = [
    messageId: BytesLike,
    params: IMessageStruct.LandingParamsStruct
  ];
  export type OutputTuple = [
    messageId: string,
    params: IMessageStruct.LandingParamsStructOutput
  ];
  export interface OutputObject {
    messageId: string;
    params: IMessageStruct.LandingParamsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuccessfulLaunchMessageEvent {
  export type InputTuple = [
    nonce: BigNumberish,
    earliestArrivalTimestamp: BigNumberish,
    latestArrivalTimestamp: BigNumberish,
    relayer: AddressLike,
    sender: AddressLike,
    srcContract: AddressLike,
    value: BigNumberish,
    destChainid: BigNumberish,
    additionParams: BytesLike,
    message: BytesLike
  ];
  export type OutputTuple = [
    nonce: bigint,
    earliestArrivalTimestamp: bigint,
    latestArrivalTimestamp: bigint,
    relayer: string,
    sender: string,
    srcContract: string,
    value: bigint,
    destChainid: bigint,
    additionParams: string,
    message: string
  ];
  export interface OutputObject {
    nonce: bigint;
    earliestArrivalTimestamp: bigint;
    latestArrivalTimestamp: bigint;
    relayer: string;
    sender: string;
    srcContract: string;
    value: bigint;
    destChainid: bigint;
    additionParams: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuccessfulLaunchMultiMessagesEvent {
  export type InputTuple = [
    nonce: BigNumberish[],
    earliestArrivalTimestamp: BigNumberish,
    latestArrivalTimestamp: BigNumberish,
    relayer: AddressLike,
    sender: AddressLike,
    srcContract: AddressLike,
    value: BigNumberish[],
    destChainid: BigNumberish[],
    additionParams: BytesLike[],
    message: BytesLike[]
  ];
  export type OutputTuple = [
    nonce: bigint[],
    earliestArrivalTimestamp: bigint,
    latestArrivalTimestamp: bigint,
    relayer: string,
    sender: string,
    srcContract: string,
    value: bigint[],
    destChainid: bigint[],
    additionParams: string[],
    message: string[]
  ];
  export interface OutputObject {
    nonce: bigint[];
    earliestArrivalTimestamp: bigint;
    latestArrivalTimestamp: bigint;
    relayer: string;
    sender: string;
    srcContract: string;
    value: bigint[];
    destChainid: bigint[];
    additionParams: string[];
    message: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawRequestEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMessageEvent extends BaseContract {
  connect(runner?: ContractRunner | null): IMessageEvent;
  waitForDeployment(): Promise<this>;

  interface: IMessageEventInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "EngineStateRefreshing"
  ): TypedContractEvent<
    EngineStateRefreshingEvent.InputTuple,
    EngineStateRefreshingEvent.OutputTuple,
    EngineStateRefreshingEvent.OutputObject
  >;
  getEvent(
    key: "PaymentSystemChanging"
  ): TypedContractEvent<
    PaymentSystemChangingEvent.InputTuple,
    PaymentSystemChangingEvent.OutputTuple,
    PaymentSystemChangingEvent.OutputObject
  >;
  getEvent(
    key: "SuccessfulLanding"
  ): TypedContractEvent<
    SuccessfulLandingEvent.InputTuple,
    SuccessfulLandingEvent.OutputTuple,
    SuccessfulLandingEvent.OutputObject
  >;
  getEvent(
    key: "SuccessfulLaunchMessage"
  ): TypedContractEvent<
    SuccessfulLaunchMessageEvent.InputTuple,
    SuccessfulLaunchMessageEvent.OutputTuple,
    SuccessfulLaunchMessageEvent.OutputObject
  >;
  getEvent(
    key: "SuccessfulLaunchMultiMessages"
  ): TypedContractEvent<
    SuccessfulLaunchMultiMessagesEvent.InputTuple,
    SuccessfulLaunchMultiMessagesEvent.OutputTuple,
    SuccessfulLaunchMultiMessagesEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawRequest"
  ): TypedContractEvent<
    WithdrawRequestEvent.InputTuple,
    WithdrawRequestEvent.OutputTuple,
    WithdrawRequestEvent.OutputObject
  >;

  filters: {
    "EngineStateRefreshing(bool)": TypedContractEvent<
      EngineStateRefreshingEvent.InputTuple,
      EngineStateRefreshingEvent.OutputTuple,
      EngineStateRefreshingEvent.OutputObject
    >;
    EngineStateRefreshing: TypedContractEvent<
      EngineStateRefreshingEvent.InputTuple,
      EngineStateRefreshingEvent.OutputTuple,
      EngineStateRefreshingEvent.OutputObject
    >;

    "PaymentSystemChanging(address)": TypedContractEvent<
      PaymentSystemChangingEvent.InputTuple,
      PaymentSystemChangingEvent.OutputTuple,
      PaymentSystemChangingEvent.OutputObject
    >;
    PaymentSystemChanging: TypedContractEvent<
      PaymentSystemChangingEvent.InputTuple,
      PaymentSystemChangingEvent.OutputTuple,
      PaymentSystemChangingEvent.OutputObject
    >;

    "SuccessfulLanding(bytes32,tuple)": TypedContractEvent<
      SuccessfulLandingEvent.InputTuple,
      SuccessfulLandingEvent.OutputTuple,
      SuccessfulLandingEvent.OutputObject
    >;
    SuccessfulLanding: TypedContractEvent<
      SuccessfulLandingEvent.InputTuple,
      SuccessfulLandingEvent.OutputTuple,
      SuccessfulLandingEvent.OutputObject
    >;

    "SuccessfulLaunchMessage(uint32,uint64,uint64,address,address,address,uint256,uint64,bytes,bytes)": TypedContractEvent<
      SuccessfulLaunchMessageEvent.InputTuple,
      SuccessfulLaunchMessageEvent.OutputTuple,
      SuccessfulLaunchMessageEvent.OutputObject
    >;
    SuccessfulLaunchMessage: TypedContractEvent<
      SuccessfulLaunchMessageEvent.InputTuple,
      SuccessfulLaunchMessageEvent.OutputTuple,
      SuccessfulLaunchMessageEvent.OutputObject
    >;

    "SuccessfulLaunchMultiMessages(uint32[],uint64,uint64,address,address,address,uint256[],uint64[],bytes[],bytes[])": TypedContractEvent<
      SuccessfulLaunchMultiMessagesEvent.InputTuple,
      SuccessfulLaunchMultiMessagesEvent.OutputTuple,
      SuccessfulLaunchMultiMessagesEvent.OutputObject
    >;
    SuccessfulLaunchMultiMessages: TypedContractEvent<
      SuccessfulLaunchMultiMessagesEvent.InputTuple,
      SuccessfulLaunchMultiMessagesEvent.OutputTuple,
      SuccessfulLaunchMultiMessagesEvent.OutputObject
    >;

    "WithdrawRequest(address,uint256)": TypedContractEvent<
      WithdrawRequestEvent.InputTuple,
      WithdrawRequestEvent.OutputTuple,
      WithdrawRequestEvent.OutputObject
    >;
    WithdrawRequest: TypedContractEvent<
      WithdrawRequestEvent.InputTuple,
      WithdrawRequestEvent.OutputTuple,
      WithdrawRequestEvent.OutputObject
    >;
  };
}
