/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IVizingGasSystemChannelInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchEstimateTotalFee"
      | "computeTradeFee(address,uint64,uint256)"
      | "computeTradeFee(uint64,uint256)"
      | "estimateGas"
      | "estimatePrice(uint64)"
      | "estimatePrice(address,uint64)"
      | "estimateTotalFee"
      | "exactInput"
      | "exactOutput"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchEstimateTotalFee",
    values: [BigNumberish[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTradeFee(address,uint64,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTradeFee(uint64,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateGas",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "estimatePrice(uint64)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimatePrice(address,uint64)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateTotalFee",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInput",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutput",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchEstimateTotalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTradeFee(address,uint64,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTradeFee(uint64,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatePrice(uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatePrice(address,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateTotalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exactInput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exactOutput",
    data: BytesLike
  ): Result;
}

export interface IVizingGasSystemChannel extends BaseContract {
  connect(runner?: ContractRunner | null): IVizingGasSystemChannel;
  waitForDeployment(): Promise<this>;

  interface: IVizingGasSystemChannelInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchEstimateTotalFee: TypedContractMethod<
    [
      amountOut: BigNumberish[],
      destChainid: BigNumberish[],
      message: BytesLike[]
    ],
    [bigint],
    "view"
  >;

  "computeTradeFee(address,uint64,uint256)": TypedContractMethod<
    [
      targetContract: AddressLike,
      destChainid: BigNumberish,
      amountOut: BigNumberish
    ],
    [bigint],
    "view"
  >;

  "computeTradeFee(uint64,uint256)": TypedContractMethod<
    [destChainid: BigNumberish, amountOut: BigNumberish],
    [bigint],
    "view"
  >;

  estimateGas: TypedContractMethod<
    [amountOut: BigNumberish, destChainid: BigNumberish, message: BytesLike],
    [bigint],
    "view"
  >;

  "estimatePrice(uint64)": TypedContractMethod<
    [destChainid: BigNumberish],
    [bigint],
    "view"
  >;

  "estimatePrice(address,uint64)": TypedContractMethod<
    [targetContract: AddressLike, destChainid: BigNumberish],
    [bigint],
    "view"
  >;

  estimateTotalFee: TypedContractMethod<
    [value: BigNumberish, destChainid: BigNumberish, message: BytesLike],
    [bigint],
    "view"
  >;

  exactInput: TypedContractMethod<
    [destChainid: BigNumberish, amountIn: BigNumberish],
    [bigint],
    "view"
  >;

  exactOutput: TypedContractMethod<
    [destChainid: BigNumberish, amountOut: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchEstimateTotalFee"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish[],
      destChainid: BigNumberish[],
      message: BytesLike[]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeTradeFee(address,uint64,uint256)"
  ): TypedContractMethod<
    [
      targetContract: AddressLike,
      destChainid: BigNumberish,
      amountOut: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeTradeFee(uint64,uint256)"
  ): TypedContractMethod<
    [destChainid: BigNumberish, amountOut: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "estimateGas"
  ): TypedContractMethod<
    [amountOut: BigNumberish, destChainid: BigNumberish, message: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "estimatePrice(uint64)"
  ): TypedContractMethod<[destChainid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "estimatePrice(address,uint64)"
  ): TypedContractMethod<
    [targetContract: AddressLike, destChainid: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "estimateTotalFee"
  ): TypedContractMethod<
    [value: BigNumberish, destChainid: BigNumberish, message: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "exactInput"
  ): TypedContractMethod<
    [destChainid: BigNumberish, amountIn: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "exactOutput"
  ): TypedContractMethod<
    [destChainid: BigNumberish, amountOut: BigNumberish],
    [bigint],
    "view"
  >;

  filters: {};
}
