/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface OmniNFTBridgeCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_GASLIMIT"
      | "LandingPad"
      | "LaunchPad"
      | "PacketAdditionParams"
      | "PacketMessage"
      | "PacketMessages"
      | "_encodeMetadata"
      | "bridgeAsset"
      | "computeTradeFee"
      | "defaultBridgeMode"
      | "emit2LaunchPad"
      | "estimateVizingGasFee"
      | "exactInput"
      | "exactOutput"
      | "fetchBridgeAssetDetails"
      | "fetchBridgeAssetMessage(uint64,address,uint256,address,bytes)"
      | "fetchBridgeAssetMessage(uint64,address,uint256,address,string,bytes)"
      | "maxArrivalTime"
      | "maxGasLimit"
      | "minArrivalTime"
      | "minGasLimit"
      | "mirrorBridge"
      | "mirrorGovernor"
      | "onERC721Received"
      | "predictNFTAddress"
      | "receiveStandardMessage"
      | "selectedRelayer"
      | "tokenInfoToWrappedToken"
      | "wrappedTokens"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewWrappedToken"): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_GASLIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LandingPad",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LaunchPad", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PacketAdditionParams",
    values: [BytesLike, BytesLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "PacketMessage",
    values: [BytesLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "PacketMessages",
    values: [
      BytesLike[],
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_encodeMetadata",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeAsset",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTradeFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultBridgeMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emit2LaunchPad",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateVizingGasFee",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInput",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutput",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchBridgeAssetDetails",
    values: [BigNumberish, AddressLike, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchBridgeAssetMessage(uint64,address,uint256,address,bytes)",
    values: [BigNumberish, AddressLike, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchBridgeAssetMessage(uint64,address,uint256,address,string,bytes)",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxArrivalTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minArrivalTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorBridge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorGovernor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "predictNFTAddress",
    values: [BigNumberish, BigNumberish, AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveStandardMessage",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selectedRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInfoToWrappedToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedTokens",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_GASLIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LandingPad", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LaunchPad", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PacketAdditionParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PacketMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PacketMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_encodeMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTradeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultBridgeMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emit2LaunchPad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateVizingGasFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exactInput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exactOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchBridgeAssetDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchBridgeAssetMessage(uint64,address,uint256,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchBridgeAssetMessage(uint64,address,uint256,address,string,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxArrivalTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minArrivalTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mirrorBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mirrorGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveStandardMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectedRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenInfoToWrappedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedTokens",
    data: BytesLike
  ): Result;
}

export namespace NewWrappedTokenEvent {
  export type InputTuple = [
    originChainId: BigNumberish,
    originTokenAddress: AddressLike,
    wrappedTokenAddress: AddressLike,
    name: string,
    symbol: string,
    uri: string
  ];
  export type OutputTuple = [
    originChainId: bigint,
    originTokenAddress: string,
    wrappedTokenAddress: string,
    name: string,
    symbol: string,
    uri: string
  ];
  export interface OutputObject {
    originChainId: bigint;
    originTokenAddress: string;
    wrappedTokenAddress: string;
    name: string;
    symbol: string;
    uri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OmniNFTBridgeCore extends BaseContract {
  connect(runner?: ContractRunner | null): OmniNFTBridgeCore;
  waitForDeployment(): Promise<this>;

  interface: OmniNFTBridgeCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_GASLIMIT: TypedContractMethod<[], [bigint], "view">;

  LandingPad: TypedContractMethod<[], [string], "view">;

  LaunchPad: TypedContractMethod<[], [string], "view">;

  PacketAdditionParams: TypedContractMethod<
    [
      mode: BytesLike,
      tokenSymbol: BytesLike,
      sender: AddressLike,
      receiver: AddressLike,
      amount: BigNumberish
    ],
    [string],
    "view"
  >;

  PacketMessage: TypedContractMethod<
    [
      mode: BytesLike,
      targetContract: AddressLike,
      gasLimit: BigNumberish,
      price: BigNumberish,
      message: BytesLike
    ],
    [string],
    "view"
  >;

  PacketMessages: TypedContractMethod<
    [
      mode: BytesLike[],
      targetContract: AddressLike[],
      gasLimit: BigNumberish[],
      price: BigNumberish[],
      message: BytesLike[]
    ],
    [string[]],
    "view"
  >;

  _encodeMetadata: TypedContractMethod<
    [
      mode: BytesLike,
      originTokenAddress: AddressLike,
      originChainId: BigNumberish,
      tokenReceiver: AddressLike,
      tokenId: BigNumberish,
      token: AddressLike,
      baseURI: string,
      companionMessage: BytesLike
    ],
    [string],
    "view"
  >;

  bridgeAsset: TypedContractMethod<
    [
      destinationChainId: BigNumberish,
      tokenReceiver: AddressLike,
      tokenId: BigNumberish,
      token: AddressLike,
      baseURI: string,
      companionMessage: BytesLike
    ],
    [void],
    "payable"
  >;

  computeTradeFee: TypedContractMethod<
    [destChainid: BigNumberish, value: BigNumberish],
    [bigint],
    "view"
  >;

  defaultBridgeMode: TypedContractMethod<[], [string], "view">;

  emit2LaunchPad: TypedContractMethod<
    [
      earliestArrivalTimestamp: BigNumberish,
      latestArrivalTimestamp: BigNumberish,
      relayer: AddressLike,
      sender: AddressLike,
      value: BigNumberish,
      destChainid: BigNumberish,
      additionParams: BytesLike,
      message: BytesLike
    ],
    [void],
    "payable"
  >;

  estimateVizingGasFee: TypedContractMethod<
    [
      value: BigNumberish,
      destChainid: BigNumberish,
      additionParams: BytesLike,
      message: BytesLike
    ],
    [bigint],
    "view"
  >;

  exactInput: TypedContractMethod<
    [destChainid: BigNumberish, amountIn: BigNumberish],
    [bigint],
    "view"
  >;

  exactOutput: TypedContractMethod<
    [destChainid: BigNumberish, amountOut: BigNumberish],
    [bigint],
    "view"
  >;

  fetchBridgeAssetDetails: TypedContractMethod<
    [
      destinationChainId: BigNumberish,
      tokenReceiver: AddressLike,
      tokenId: BigNumberish,
      token: AddressLike,
      companionMessage: BytesLike
    ],
    [[bigint, string] & { gasFee: bigint; encodedMessage: string }],
    "view"
  >;

  "fetchBridgeAssetMessage(uint64,address,uint256,address,bytes)": TypedContractMethod<
    [
      destinationChainId: BigNumberish,
      tokenReceiver: AddressLike,
      tokenId: BigNumberish,
      token: AddressLike,
      companionMessage: BytesLike
    ],
    [string],
    "view"
  >;

  "fetchBridgeAssetMessage(uint64,address,uint256,address,string,bytes)": TypedContractMethod<
    [
      destinationChainId: BigNumberish,
      tokenReceiver: AddressLike,
      tokenId: BigNumberish,
      token: AddressLike,
      baseURI: string,
      companionMessage: BytesLike
    ],
    [string],
    "view"
  >;

  maxArrivalTime: TypedContractMethod<[], [bigint], "view">;

  maxGasLimit: TypedContractMethod<[], [bigint], "view">;

  minArrivalTime: TypedContractMethod<[], [bigint], "view">;

  minGasLimit: TypedContractMethod<[], [bigint], "view">;

  mirrorBridge: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  mirrorGovernor: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  onERC721Received: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  predictNFTAddress: TypedContractMethod<
    [
      destinationChainId: BigNumberish,
      originChainId: BigNumberish,
      originTokenAddress: AddressLike,
      name: string,
      symbol: string
    ],
    [string],
    "view"
  >;

  receiveStandardMessage: TypedContractMethod<
    [srcChainId: BigNumberish, srcContract: BigNumberish, message: BytesLike],
    [void],
    "payable"
  >;

  selectedRelayer: TypedContractMethod<[], [string], "view">;

  tokenInfoToWrappedToken: TypedContractMethod<
    [arg0: BytesLike],
    [string],
    "view"
  >;

  wrappedTokens: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, string] & { originChainId: bigint; originTokenAddress: string }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_GASLIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LandingPad"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LaunchPad"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PacketAdditionParams"
  ): TypedContractMethod<
    [
      mode: BytesLike,
      tokenSymbol: BytesLike,
      sender: AddressLike,
      receiver: AddressLike,
      amount: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "PacketMessage"
  ): TypedContractMethod<
    [
      mode: BytesLike,
      targetContract: AddressLike,
      gasLimit: BigNumberish,
      price: BigNumberish,
      message: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "PacketMessages"
  ): TypedContractMethod<
    [
      mode: BytesLike[],
      targetContract: AddressLike[],
      gasLimit: BigNumberish[],
      price: BigNumberish[],
      message: BytesLike[]
    ],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "_encodeMetadata"
  ): TypedContractMethod<
    [
      mode: BytesLike,
      originTokenAddress: AddressLike,
      originChainId: BigNumberish,
      tokenReceiver: AddressLike,
      tokenId: BigNumberish,
      token: AddressLike,
      baseURI: string,
      companionMessage: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "bridgeAsset"
  ): TypedContractMethod<
    [
      destinationChainId: BigNumberish,
      tokenReceiver: AddressLike,
      tokenId: BigNumberish,
      token: AddressLike,
      baseURI: string,
      companionMessage: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "computeTradeFee"
  ): TypedContractMethod<
    [destChainid: BigNumberish, value: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "defaultBridgeMode"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emit2LaunchPad"
  ): TypedContractMethod<
    [
      earliestArrivalTimestamp: BigNumberish,
      latestArrivalTimestamp: BigNumberish,
      relayer: AddressLike,
      sender: AddressLike,
      value: BigNumberish,
      destChainid: BigNumberish,
      additionParams: BytesLike,
      message: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "estimateVizingGasFee"
  ): TypedContractMethod<
    [
      value: BigNumberish,
      destChainid: BigNumberish,
      additionParams: BytesLike,
      message: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "exactInput"
  ): TypedContractMethod<
    [destChainid: BigNumberish, amountIn: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "exactOutput"
  ): TypedContractMethod<
    [destChainid: BigNumberish, amountOut: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "fetchBridgeAssetDetails"
  ): TypedContractMethod<
    [
      destinationChainId: BigNumberish,
      tokenReceiver: AddressLike,
      tokenId: BigNumberish,
      token: AddressLike,
      companionMessage: BytesLike
    ],
    [[bigint, string] & { gasFee: bigint; encodedMessage: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "fetchBridgeAssetMessage(uint64,address,uint256,address,bytes)"
  ): TypedContractMethod<
    [
      destinationChainId: BigNumberish,
      tokenReceiver: AddressLike,
      tokenId: BigNumberish,
      token: AddressLike,
      companionMessage: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "fetchBridgeAssetMessage(uint64,address,uint256,address,string,bytes)"
  ): TypedContractMethod<
    [
      destinationChainId: BigNumberish,
      tokenReceiver: AddressLike,
      tokenId: BigNumberish,
      token: AddressLike,
      baseURI: string,
      companionMessage: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxArrivalTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minArrivalTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mirrorBridge"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "mirrorGovernor"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "predictNFTAddress"
  ): TypedContractMethod<
    [
      destinationChainId: BigNumberish,
      originChainId: BigNumberish,
      originTokenAddress: AddressLike,
      name: string,
      symbol: string
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "receiveStandardMessage"
  ): TypedContractMethod<
    [srcChainId: BigNumberish, srcContract: BigNumberish, message: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "selectedRelayer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenInfoToWrappedToken"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "wrappedTokens"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, string] & { originChainId: bigint; originTokenAddress: string }],
    "view"
  >;

  getEvent(
    key: "NewWrappedToken"
  ): TypedContractEvent<
    NewWrappedTokenEvent.InputTuple,
    NewWrappedTokenEvent.OutputTuple,
    NewWrappedTokenEvent.OutputObject
  >;

  filters: {
    "NewWrappedToken(uint64,address,address,string,string,string)": TypedContractEvent<
      NewWrappedTokenEvent.InputTuple,
      NewWrappedTokenEvent.OutputTuple,
      NewWrappedTokenEvent.OutputObject
    >;
    NewWrappedToken: TypedContractEvent<
      NewWrappedTokenEvent.InputTuple,
      NewWrappedTokenEvent.OutputTuple,
      NewWrappedTokenEvent.OutputObject
    >;
  };
}
