/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IOmniNFTBridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bridgeAsset"
      | "fetchBridgeAssetDetails"
      | "predictNFTAddress"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewWrappedToken"): EventFragment;

  encodeFunctionData(
    functionFragment: "bridgeAsset",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchBridgeAssetDetails",
    values: [BigNumberish, AddressLike, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "predictNFTAddress",
    values: [BigNumberish, BigNumberish, AddressLike, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "bridgeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchBridgeAssetDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictNFTAddress",
    data: BytesLike
  ): Result;
}

export namespace NewWrappedTokenEvent {
  export type InputTuple = [
    originChainId: BigNumberish,
    originTokenAddress: AddressLike,
    wrappedTokenAddress: AddressLike,
    name: string,
    symbol: string,
    uri: string
  ];
  export type OutputTuple = [
    originChainId: bigint,
    originTokenAddress: string,
    wrappedTokenAddress: string,
    name: string,
    symbol: string,
    uri: string
  ];
  export interface OutputObject {
    originChainId: bigint;
    originTokenAddress: string;
    wrappedTokenAddress: string;
    name: string;
    symbol: string;
    uri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOmniNFTBridge extends BaseContract {
  connect(runner?: ContractRunner | null): IOmniNFTBridge;
  waitForDeployment(): Promise<this>;

  interface: IOmniNFTBridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bridgeAsset: TypedContractMethod<
    [
      destinationChainId: BigNumberish,
      tokenReceiver: AddressLike,
      tokenId: BigNumberish,
      token: AddressLike,
      baseURI: string,
      companionMessage: BytesLike
    ],
    [void],
    "payable"
  >;

  fetchBridgeAssetDetails: TypedContractMethod<
    [
      destinationChainId: BigNumberish,
      tokenReceiver: AddressLike,
      tokenId: BigNumberish,
      token: AddressLike,
      companionMessage: BytesLike
    ],
    [[bigint, string] & { gasFee: bigint; encodedMessage: string }],
    "view"
  >;

  predictNFTAddress: TypedContractMethod<
    [
      destinationChainId: BigNumberish,
      originChainId: BigNumberish,
      originTokenAddress: AddressLike,
      name: string,
      symbol: string
    ],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bridgeAsset"
  ): TypedContractMethod<
    [
      destinationChainId: BigNumberish,
      tokenReceiver: AddressLike,
      tokenId: BigNumberish,
      token: AddressLike,
      baseURI: string,
      companionMessage: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fetchBridgeAssetDetails"
  ): TypedContractMethod<
    [
      destinationChainId: BigNumberish,
      tokenReceiver: AddressLike,
      tokenId: BigNumberish,
      token: AddressLike,
      companionMessage: BytesLike
    ],
    [[bigint, string] & { gasFee: bigint; encodedMessage: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "predictNFTAddress"
  ): TypedContractMethod<
    [
      destinationChainId: BigNumberish,
      originChainId: BigNumberish,
      originTokenAddress: AddressLike,
      name: string,
      symbol: string
    ],
    [string],
    "view"
  >;

  getEvent(
    key: "NewWrappedToken"
  ): TypedContractEvent<
    NewWrappedTokenEvent.InputTuple,
    NewWrappedTokenEvent.OutputTuple,
    NewWrappedTokenEvent.OutputObject
  >;

  filters: {
    "NewWrappedToken(uint64,address,address,string,string,string)": TypedContractEvent<
      NewWrappedTokenEvent.InputTuple,
      NewWrappedTokenEvent.OutputTuple,
      NewWrappedTokenEvent.OutputObject
    >;
    NewWrappedToken: TypedContractEvent<
      NewWrappedTokenEvent.InputTuple,
      NewWrappedTokenEvent.OutputTuple,
      NewWrappedTokenEvent.OutputObject
    >;
  };
}
