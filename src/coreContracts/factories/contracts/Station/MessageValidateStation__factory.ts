/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { PayableOverrides } from "../../../common";
import type {
  MessageValidateStation,
  MessageValidateStationInterface,
} from "../../../contracts/Station/MessageValidateStation";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DuplicatedValue",
    type: "error",
  },
  {
    inputs: [],
    name: "ECDSAInvalidSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "ECDSAInvalidSignatureLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "ECDSAInvalidSignatureS",
    type: "error",
  },
  {
    inputs: [],
    name: "MerkleProofInvalidMultiproof",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "SetupError",
    type: "error",
  },
  {
    inputs: [],
    name: "VerifyFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint64",
                name: "srcChainId",
                type: "uint64",
              },
              {
                internalType: "uint24",
                name: "nonceLaunch",
                type: "uint24",
              },
              {
                internalType: "bytes32",
                name: "srcTxHash",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "destTxHash",
                type: "bytes32",
              },
              {
                internalType: "uint64",
                name: "srcTxTimestamp",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "destTxTimestamp",
                type: "uint64",
              },
            ],
            internalType: "struct IMessageStruct.SignedMessageBase",
            name: "base",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "earliestArrivalTimestamp",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "latestArrivalTimestamp",
                type: "uint64",
              },
              {
                internalType: "address",
                name: "relayer",
                type: "address",
              },
              {
                internalType: "address",
                name: "sender",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "destChainid",
                type: "uint64",
              },
              {
                internalType: "bytes",
                name: "additionParams",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "message",
                type: "bytes",
              },
            ],
            internalType: "struct IMessageStruct.launchParams",
            name: "params",
            type: "tuple",
          },
        ],
        indexed: true,
        internalType: "struct IMessageStruct.RollupMessageStruct[]",
        name: "signedMessage",
        type: "tuple[]",
      },
    ],
    name: "LaunchMessageVerified",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "MessageSaved",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "srcChainId",
            type: "uint64",
          },
          {
            internalType: "uint24",
            name: "nonceLaunch",
            type: "uint24",
          },
          {
            internalType: "bytes32",
            name: "srcTxHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "destTxHash",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "srcTxTimestamp",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "destTxTimestamp",
            type: "uint64",
          },
        ],
        internalType: "struct IMessageStruct.SignedMessageBase",
        name: "base",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint64",
            name: "earliestArrivalTimestamp",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "latestArrivalTimestamp",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "relayer",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "destChainid",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "additionParams",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        internalType: "struct IMessageStruct.launchParams",
        name: "params",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "RegistedValidator",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "validators",
        type: "address[]",
      },
      {
        internalType: "bool[]",
        name: "statues",
        type: "bool[]",
      },
    ],
    name: "SetupValidator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "SignaturesThreshold",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ValidatorCount",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "bool[]",
        name: "proofFlags",
        type: "bool[]",
      },
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint64",
                name: "srcChainId",
                type: "uint64",
              },
              {
                internalType: "uint24",
                name: "nonceLaunch",
                type: "uint24",
              },
              {
                internalType: "bytes32",
                name: "srcTxHash",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "destTxHash",
                type: "bytes32",
              },
              {
                internalType: "uint64",
                name: "srcTxTimestamp",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "destTxTimestamp",
                type: "uint64",
              },
            ],
            internalType: "struct IMessageStruct.SignedMessageBase",
            name: "base",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "earliestArrivalTimestamp",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "latestArrivalTimestamp",
                type: "uint64",
              },
              {
                internalType: "address",
                name: "relayer",
                type: "address",
              },
              {
                internalType: "address",
                name: "sender",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "destChainid",
                type: "uint64",
              },
              {
                internalType: "bytes",
                name: "additionParams",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "message",
                type: "bytes",
              },
            ],
            internalType: "struct IMessageStruct.launchParams",
            name: "params",
            type: "tuple",
          },
        ],
        internalType: "struct IMessageStruct.RollupMessageStruct[]",
        name: "signedMessage",
        type: "tuple[]",
      },
      {
        internalType: "bytes[]",
        name: "launchParamsSignatures",
        type: "bytes[]",
      },
    ],
    name: "VerifyLaunchMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052338061002a57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61003381610039565b50610089565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6121f5806100986000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063dbf9849511610076578063e63d4b341161005b578063e63d4b3414610182578063ebb2e24514610195578063f2fde38b146101b657600080fd5b8063dbf9849514610129578063e3213ebb1461014f57600080fd5b8063715018a6146100a8578063750923b9146100b25780638da5cb5b146100ee578063b179989714610116575b600080fd5b6100b06101c9565b005b6000546100d79074010000000000000000000000000000000000000000900460ff1681565b60405160ff90911681526020015b60405180910390f35b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e5565b6100b06101243660046111a2565b6101dd565b6000546100d7907501000000000000000000000000000000000000000000900460ff1681565b61017261015d3660046112e7565b60026020526000908152604090205460ff1681565b60405190151581526020016100e5565b6100b0610190366004611304565b6103c2565b6101a86101a3366004611370565b6105d3565b6040516100e59291906113ed565b6100b06101c43660046112e7565b6107e7565b6101d1610850565b6101db60006108a3565b565b61021761021085856040516020016101f692919061181b565b604051602081830303815290604052805160209091012090565b8383610918565b60008367ffffffffffffffff81111561023257610232611029565b60405190808252806020026020018201604052801561025b578160200160208202803683370190505b50905060005b84811015610330576102a086868381811061027e5761027e61189b565b905060200281019061029091906118ca565b6040516020016101f69190611908565b8282815181106102b2576102b261189b565b6020026020010181815250506102ed8686838181106102d3576102d361189b565b90506020028101906102e591906118ca565b600190610a1d565b1515600003610328576040517fa63b42c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600101610261565b5061033d88888884610acc565b1515600003610378576040517f73bb2cf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8484604051610388929190611a1f565b604051908190038120907f7e90685a8d768fe04eea1e672a474c081ec69a81c9d119fd1500653d6387fbf490600090a25050505050505050565b6103ca610850565b828114610403576040517f12e02d1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8381101561057b578282828181106104205761042061189b565b90506020020160208101906104359190611aef565b6002600087878581811061044b5761044b61189b565b905060200201602081019061046091906112e7565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790558282828181106104c5576104c561189b565b90506020020160208101906104da9190611aef565b151560010361052d57600080547501000000000000000000000000000000000000000000900460ff1690601561050f83611b39565b91906101000a81548160ff021916908360ff16021790555050610573565b600080547501000000000000000000000000000000000000000000900460ff1690601561055983611b58565b91906101000a81548160ff021916908360ff160217905550505b600101610406565b506000546003906105a9907501000000000000000000000000000000000000000000900460ff166002611b93565b6105b39190611bac565b600060146101000a81548160ff021916908360ff16021790555050505050565b600160208181526000928352604092839020835160c08082018652825467ffffffffffffffff808216845262ffffff6801000000000000000092839004168487015295840154838801526002840154606080850191909152600385015480881660808087019190915290839004881660a080870191909152895161010081018b52600488018054808c168352959095048a1698810198909852600587015473ffffffffffffffffffffffffffffffffffffffff9081169a89019a909a5260068701549099169187019190915260078501549086015260088401549095169584019590955260098201805491959294928401916106ce90611bf5565b80601f01602080910402602001604051908101604052809291908181526020018280546106fa90611bf5565b80156107475780601f1061071c57610100808354040283529160200191610747565b820191906000526020600020905b81548152906001019060200180831161072a57829003601f168201915b5050505050815260200160068201805461076090611bf5565b80601f016020809104026020016040519081016040528092919081815260200182805461078c90611bf5565b80156107d95780601f106107ae576101008083540402835291602001916107d9565b820191906000526020600020905b8154815290600101906020018083116107bc57829003601f168201915b505050505081525050905082565b6107ef610850565b73ffffffffffffffffffffffffffffffffffffffff8116610844576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b61084d816108a3565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101db576040517f118cdaa700000000000000000000000000000000000000000000000000000000815233600482015260240161083b565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008167ffffffffffffffff81111561093357610933611029565b60405190808252806020026020018201604052801561095c578160200160208202803683370190505b50905060005b82811015610a16576109d784848381811061097f5761097f61189b565b90506020028101906109919190611c48565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506109d19250899150610ae49050565b90610b17565b8282815181106109e9576109e961189b565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610962565b5050505050565b600080610a2d6020840184611cad565b6040805167ffffffffffffffff90921660208301528481013590820152606001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152815160209283012060008181529287905291206001015490915015610aa4576000915050610ac6565b60008181526020859052604090208390610abe8282612000565b506001925050505b92915050565b600082610ada868685610b41565b1495945050505050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b600080600080610b278686610dae565b925092509250610b378282610dfb565b5090949350505050565b8051835183516000929190610b5781600161216e565b610b61838561216e565b14610b98576040517f3514049200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008167ffffffffffffffff811115610bb357610bb3611029565b604051908082528060200260200182016040528015610bdc578160200160208202803683370190505b5090506000806000805b85811015610d10576000888510610c21578584610c0281612181565b955081518110610c1457610c1461189b565b6020026020010151610c47565b8a85610c2c81612181565b965081518110610c3e57610c3e61189b565b60200260200101515b905060008c8381518110610c5d57610c5d61189b565b6020026020010151610c93578d84610c7481612181565b955081518110610c8657610c8661189b565b6020026020010151610cdd565b898610610cb7578685610ca581612181565b965081518110610c8657610c8661189b565b8b86610cc281612181565b975081518110610cd457610cd461189b565b60200260200101515b9050610ce98282610f03565b878481518110610cfb57610cfb61189b565b60209081029190910101525050600101610be6565b508415610d7b57858114610d50576040517f3514049200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836001860381518110610d6557610d6561189b565b6020026020010151975050505050505050610da7565b8615610d945788600081518110610d6557610d6561189b565b8a600081518110610d6557610d6561189b565b9392505050565b60008060008351604103610de85760208401516040850151606086015160001a610dda88828585610f2f565b955095509550505050610df4565b50508151600091506002905b9250925092565b6000826003811115610e0f57610e0f6121b9565b03610e18575050565b6001826003811115610e2c57610e2c6121b9565b03610e63576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002826003811115610e7757610e776121b9565b03610eb1576040517ffce698f70000000000000000000000000000000000000000000000000000000081526004810182905260240161083b565b6003826003811115610ec557610ec56121b9565b03610eff576040517fd78bce0c0000000000000000000000000000000000000000000000000000000081526004810182905260240161083b565b5050565b6000818310610f1f576000828152602084905260409020610da7565b5060009182526020526040902090565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610f6a575060009150600390508261101f565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610fbe573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166110155750600092506001915082905061101f565b9250600091508190505b9450945094915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561109f5761109f611029565b604052919050565b600067ffffffffffffffff8211156110c1576110c1611029565b5060051b60200190565b803580151581146110db57600080fd5b919050565b600082601f8301126110f157600080fd5b81356020611106611101836110a7565b611058565b8083825260208201915060208460051b87010193508684111561112857600080fd5b602086015b8481101561114b5761113e816110cb565b835291830191830161112d565b509695505050505050565b60008083601f84011261116857600080fd5b50813567ffffffffffffffff81111561118057600080fd5b6020830191508360208260051b850101111561119b57600080fd5b9250929050565b600080600080600080600060a0888a0312156111bd57600080fd5b873567ffffffffffffffff808211156111d557600080fd5b818a0191508a601f8301126111e957600080fd5b813560206111f9611101836110a7565b82815260059290921b8401810191818101908e84111561121857600080fd5b948201945b838610156112365785358252948201949082019061121d565b9b50508b01359250508082111561124c57600080fd5b6112588b838c016110e0565b975060408a0135965060608a013591508082111561127557600080fd5b6112818b838c01611156565b909650945060808a013591508082111561129a57600080fd5b506112a78a828b01611156565b989b979a50959850939692959293505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461084d57600080fd5b80356110db816112ba565b6000602082840312156112f957600080fd5b8135610da7816112ba565b6000806000806040858703121561131a57600080fd5b843567ffffffffffffffff8082111561133257600080fd5b61133e88838901611156565b9096509450602087013591508082111561135757600080fd5b5061136487828801611156565b95989497509550505050565b60006020828403121561138257600080fd5b5035919050565b6000815180845260005b818110156113af57602081850181015186830182015201611393565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b600067ffffffffffffffff80855116835262ffffff602086015116602084015260408501516040840152606085015160608401528060808601511660808401528060a08601511660a084015260e060c08401528084511660e08401525060208301516101006114678185018367ffffffffffffffff169052565b604085015173ffffffffffffffffffffffffffffffffffffffff908116610120860152606086015116610140850152608085015161016085015260a085015167ffffffffffffffff1661018085015260c08501516101a085019190915290506114d46101e0840182611389565b905060e08401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20848303016101c08501526115108282611389565b9695505050505050565b67ffffffffffffffff8116811461084d57600080fd5b80356110db8161151a565b62ffffff8116811461084d57600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183360301811261158057600080fd5b90910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126115be57600080fd5b830160208101925035905067ffffffffffffffff8111156115de57600080fd5b80360382131561119b57600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600081356116438161151a565b67ffffffffffffffff90811684526020830135906116608261153b565b62ffffff8216602086015260408401356040860152606084013560608601526080840135915061168f8261151a565b908116608085015260a0830135906116a68261151a565b80821660a08601526116bb60c085018561154c565b915060e060c086015281356116cf8161151a565b1660e08501526116e160208201611530565b6101006116f98187018367ffffffffffffffff169052565b611705604084016112dc565b73ffffffffffffffffffffffffffffffffffffffff81166101208801529150611730606084016112dc565b73ffffffffffffffffffffffffffffffffffffffff81166101408801529150608083013561016087015261176660a08401611530565b67ffffffffffffffff8116610180880152915061178660c0840184611589565b9250816101a088015261179e6101e0880184836115ed565b925050506117af60e0830183611589565b92507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20868303016101c08701526115108284836115ed565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2183360301811261158057600080fd5b60208082528181018390526000906040600585901b8401810190840186845b8781101561188e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc087850301835261187c84611877848c6117e7565b611636565b9350918401919084019060010161183a565b5091979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff218336030181126118fe57600080fd5b9190910192915050565b602081526000610da76020830184611636565b8181843750600082820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b6000813561195c8161151a565b67ffffffffffffffff90811684526020830135906119798261151a565b166020840152604082013561198d816112ba565b73ffffffffffffffffffffffffffffffffffffffff90811660408501526060830135906119b9826112ba565b1660608401526080828101359084015260a08201356119d78161151a565b67ffffffffffffffff1660a084015260c0808401906119f890840184611589565b611a0383828461191b565b92505050611a1460e0840184611589565b61151083828461191b565b60008184825b85811015611ae457611a3782886117e7565b8035611a428161151a565b67ffffffffffffffff908116855260209082820135611a608161153b565b62ffffff16868301526040838101359087015260608084013590870152608080840135611a8c8161151a565b9091169086015260a0611ab8818701611aa6858401611530565b67ffffffffffffffff16815260200190565b505060c0611ad3818701611ace8386018661154c565b61194f565b955050929092019150600101611a25565b509095945050505050565b600060208284031215611b0157600080fd5b610da7826110cb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff8103611b4f57611b4f611b0a565b60010192915050565b600060ff821680611b6b57611b6b611b0a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b60ff8181168382160190811115610ac657610ac6611b0a565b600060ff831680611be6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8060ff84160491505092915050565b600181811c90821680611c0957607f821691505b602082108103611c42577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611c7d57600080fd5b83018035915067ffffffffffffffff821115611c9857600080fd5b60200191503681900382131561119b57600080fd5b600060208284031215611cbf57600080fd5b8135610da78161151a565b60008135610ac68161151a565b601f821115611d23576000816000526020600020601f850160051c81016020861015611d005750805b601f850160051c820191505b81811015611d1f57828155600101611d0c565b5050505b505050565b67ffffffffffffffff831115611d4057611d40611029565b611d5483611d4e8354611bf5565b83611cd7565b6000601f841160018114611da65760008515611d705750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610a16565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015611df55786850135825560209485019460019092019101611dd5565b5086821015611e30577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b8135611e4d8161151a565b81547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff8216178255506020820135611e8e8161151a565b81547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16604082901b6fffffffffffffffff000000000000000016178255506040820135611edb816112ba565b6001820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055506060820135611f2c816112ba565b6002820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790555060808201356003820155611fc2611f8860a08401611cca565b6004830167ffffffffffffffff82167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008254161781555050565b611fcf60c0830183611c48565b611fdd818360058601611d28565b5050611fec60e0830183611c48565b611ffa818360068601611d28565b50505050565b813561200b8161151a565b81547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff821617825550602082013561204c8161153b565b81547fffffffffffffffffffffffffffffffffffffffffff000000ffffffffffffffff16604091821b6affffff0000000000000000161782558201356001820155606082013560028201556003810160808301356120a98161151a565b81547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff82161782555060a08301356120ea8161151a565b81547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16604082901b6fffffffffffffffff000000000000000016178255505060c08201357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183360301811261215f57600080fd5b611d2381840160048401611e42565b80820180821115610ac657610ac6611b0a565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036121b2576121b2611b0a565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea164736f6c6343000817000a";

type MessageValidateStationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MessageValidateStationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MessageValidateStation__factory extends ContractFactory {
  constructor(...args: MessageValidateStationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: PayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MessageValidateStation & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MessageValidateStation__factory {
    return super.connect(runner) as MessageValidateStation__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MessageValidateStationInterface {
    return new Interface(_abi) as MessageValidateStationInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MessageValidateStation {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MessageValidateStation;
  }
}
