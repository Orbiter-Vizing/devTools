/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Helper,
  HelperInterface,
} from "../../../../contracts/mocks/HelperDemo.sol/Helper";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "earliestArrivalTimestamp",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "latestArrivalTimestamp",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "srcChainid",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "srcTxHash",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "srcContract",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "srcChainNonce",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "sender",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "additionParams",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "message",
            type: "bytes",
          },
        ],
        internalType: "struct IMessageStruct.landingParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "encodeparams",
    outputs: [
      {
        internalType: "bytes32",
        name: "data",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102e3806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063caf0731f14610030575b600080fd5b61004361003e36600461008b565b610055565b60405190815260200160405180910390f35b60006100858260405160200161006b91906101b3565b604051602081830303815290604052805160209091012090565b92915050565b60006020828403121561009d57600080fd5b813567ffffffffffffffff8111156100b457600080fd5b820161016081850312156100c757600080fd5b9392505050565b803567ffffffffffffffff811681146100e657600080fd5b919050565b803563ffffffff811681146100e657600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261013457600080fd5b830160208101925035905067ffffffffffffffff81111561015457600080fd5b80360382131561016357600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b602081528135602082015260006101cc602084016100ce565b67ffffffffffffffff81166040840152506101e9604084016100ce565b67ffffffffffffffff8116606084015250610206606084016100ce565b67ffffffffffffffff8116608084015250608083013560a083015260a083013560c083015261023760c084016100eb565b63ffffffff811660e08401525061010060e0840135818401526101208185013581850152610267818601866100ff565b9250905061016061014081818701526102856101808701858561016a565b9350610293818801886100ff565b935090507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086850301828701526102cb84848361016a565b97965050505050505056fea164736f6c6343000817000a";

type HelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Helper__factory extends ContractFactory {
  constructor(...args: HelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Helper & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Helper__factory {
    return super.connect(runner) as Helper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HelperInterface {
    return new Interface(_abi) as HelperInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Helper {
    return new Contract(address, _abi, runner) as unknown as Helper;
  }
}
