/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Errors,
  ErrorsInterface,
} from "../../../contracts/library/Errors";

const _abi = [
  {
    inputs: [],
    name: "AccessDenied",
    type: "error",
  },
  {
    inputs: [],
    name: "ArrivalTimeNotMakeSense",
    type: "error",
  },
  {
    inputs: [],
    name: "DuplicatedValue",
    type: "error",
  },
  {
    inputs: [],
    name: "ExchangeError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
    ],
    name: "ExecuteError",
    type: "error",
  },
  {
    inputs: [],
    name: "HookExecuteError",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientFunds",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMessage",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "LandingPadOccupied",
    type: "error",
  },
  {
    inputs: [],
    name: "NonceNotMatched",
    type: "error",
  },
  {
    inputs: [],
    name: "NotImplement",
    type: "error",
  },
  {
    inputs: [],
    name: "OutOfGas",
    type: "error",
  },
  {
    inputs: [],
    name: "RootNotSubmitted",
    type: "error",
  },
  {
    inputs: [],
    name: "SetupError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bool[]",
        name: "results",
        type: "bool[]",
      },
    ],
    name: "SimulateResult",
    type: "error",
  },
  {
    inputs: [],
    name: "StationPaused",
    type: "error",
  },
  {
    inputs: [],
    name: "TimeNotReached",
    type: "error",
  },
  {
    inputs: [],
    name: "ValidatorNotMatched",
    type: "error",
  },
  {
    inputs: [],
    name: "ValueNotMatched",
    type: "error",
  },
  {
    inputs: [],
    name: "VerifyFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawError",
    type: "error",
  },
] as const;

const _bytecode =
  "0x602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000817000a";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Errors & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Errors__factory {
    return super.connect(runner) as Errors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Errors {
    return new Contract(address, _abi, runner) as unknown as Errors;
  }
}
