/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  ExpertHookTransfer,
  ExpertHookTransferInterface,
} from "../../../../contracts/interface/IExpertHook.sol/ExpertHookTransfer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "reveiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "tokenTransferByHook",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50609f8061001f6000396000f3fe608060405260043610601c5760003560e01c80639b5fdcd9146021575b600080fd5b6031602c366004605b565b505050565b005b803573ffffffffffffffffffffffffffffffffffffffff81168114605657600080fd5b919050565b600080600060608486031215606f57600080fd5b6076846033565b92506082602085016033565b915060408401359050925092509256fea164736f6c6343000817000a";

type ExpertHookTransferConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExpertHookTransferConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExpertHookTransfer__factory extends ContractFactory {
  constructor(...args: ExpertHookTransferConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ExpertHookTransfer & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ExpertHookTransfer__factory {
    return super.connect(runner) as ExpertHookTransfer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExpertHookTransferInterface {
    return new Interface(_abi) as ExpertHookTransferInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ExpertHookTransfer {
    return new Contract(address, _abi, runner) as unknown as ExpertHookTransfer;
  }
}
